{
    "openapi": "3.0.1",
    "info": {
        "title": "API to work with Helios Nephrite",
        "description": "Swagger with ASP.NET Core API of Helios Nephrite. (version: 6.0.22-rc)",
        "termsOfService": "https://www.helios.eu/vseobecne-obchodni-podminky/",
        "contact": {
            "name": "Asseco Solutions, a.s.",
            "url": "https://www.heliosnephrite.cz/",
            "email": "info@helios.eu"
        },
        "license": {
            "name": "Helios Nephrite license",
            "url": "https://www.helios.eu/vseobecne-obchodni-podminky/"
        },
        "version": "1.0"
    },
    "paths": {
        "/api/v1/Configuration/Periods": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Gets record periods defined in configuration. According to periodQueryParams currently active periods can be returned as well.",
                "parameters": [
                    {
                        "name": "PeriodKind",
                        "in": "query",
                        "description": "Kind of period to get.",
                        "schema": {
                            "$ref": "#/components/schemas/RecordPeriodKind"
                        },
                        "example": "All"
                    },
                    {
                        "name": "PeriodRange",
                        "in": "query",
                        "description": "Range of period to get.",
                        "schema": {
                            "$ref": "#/components/schemas/RecordPeriodRange"
                        },
                        "example": "All"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RecordPeriodResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/Connect/LogIn": {
            "post": {
                "tags": [
                    "Connect"
                ],
                "summary": "<br>\r\n             Authorizes the user specified in the authenticateInfo parameter.\r\n             \r\n<br>\r\n             Each call to this endpoint causes a new session to be created on the application server.\r\n             To authorize endpoints that require a basic authorization, you must use the returned values \"UserName\" as the login name and \"UserId\" as the password.\r\n             ",
                "description": "Sample request with a HeN account:\r\n```\r\nPOST /api/connect/login HTTP/1.1\r\nHost: localhost:53078\r\nContent-Type: application/json\r\n{\r\n    \"username\": \"username\",\r\n    \"password\": \"password\",\r\n    \"LanguageId\"   : \"CZ\",\r\n    \"DbProfile\": \"test_env\",\r\n    \"ServerURL\" : \"http://www.mydomain.cz/hen\"\r\n}\r\n```\r\n\r\nSample request with a domain account:\r\n```\r\nPOST /api/connect/login HTTP/1.1\r\nHost: localhost:53078\r\nContent-Type: application/json\r\n{\r\n    \"username\": \"ASOL\\\\username\",\r\n    \"password\": \"domain password\",\r\n    \"UseWindowsAuthentication\": true,\r\n    \"UseCurrentUserCredentials\": false\r\n    \"LanguageId\"   : \"CZ\",\r\n    \"DbProfile\": \"test_env\",\r\n    \"ServerURL\" : \"http://www.mydomain.cz/hen\"\r\n}\r\n```",
                "requestBody": {
                    "description": "Info about user to authorize.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthenticateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "<br>\r\n             Returns info of authenticated user:\r\n             \r\n<br>\r\n  ```\r\n             {\r\n             \"success\": true,\r\n             \"statusCode\": 200,\r\n             \"errorMessage\": \"\",\r\n             \"userName\": \"ASOL\\\\username\",\r\n             \"userId\": \"UserId 31f49a7ddc18e97247308d5180ac684890f5a5c3442e0ab7115e037f6d6dd2f6\"\r\n             }\r\n             ```\r\n\r\n<br>\r\n             Use returned \"userName\" value as user name and \"userId\" value as password for following basic authorization for requests that require an authentication then.\r\n             ",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticateResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<br>\r\n             If authorization failed:\r\n             \r\n<br>\r\n  ```\r\n             {\r\n              \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\r\n              \"title\": \"BadRequest\",\r\n              \"status\": 400,\r\n              \"detail\": \"Application server connection credentials are not valid.\",\r\n              \"instance\": \"POST /api/Connect/LogIn\",\r\n              }\r\n             ```\r\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "<br>\r\n             If an unexpected error occurred. Check the log then.\r\n             \r\n<br>\r\n  ```\r\n             {\r\n              \"type\": \"https://tools.ietf.org/html/rfc7235#section...\",\r\n              \"title\": \"InternalServerError\",\r\n              \"status\": 500,\r\n              \"detail\": \"\"Unknown error, check the log, please.\"\",\r\n              \"instance\": \"POST /api/Connect/LogIn\",\r\n             }\r\n             ```\r\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                }
            }
        },
        "/api/Connect/UserInfo": {
            "get": {
                "tags": [
                    "Connect"
                ],
                "summary": "Gets info about currently authenticated user.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/Connect/LogOut": {
            "post": {
                "tags": [
                    "Connect"
                ],
                "summary": "Logs out currently authorized user and removes it from authenticated users.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/DataTransfers/GeneralImport/{id}": {
            "post": {
                "tags": [
                    "DataTransfers"
                ],
                "summary": "Function which imports data in file specified in functionQuerySettings parameter (ASOL.WebAPI.Core.DataTransfers.Contracts.GeneralImportFunctionQuery.FileUID).\r\nFirst file has to be uploaded by one of endpoint on route /api/v1/Files/.\r\nThose endpoints return a unique file identifier, which has to be passed to this endpoint.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Unique identifier of the General import entity with a definition which is used to import data.",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "FileUID",
                        "in": "query",
                        "description": "Unique id of previously uploaded file by an endpoint /api/v{N}/files/upload.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "FolderId",
                        "in": "query",
                        "description": "Gets or sets folder identifier. Folder can be considered as a context in which the function runs. \r\nIf ASOL.Nephrite.WebAPI.Contracts.ModelFunctionQueryBase.FolderId equals 0, the function runs over view, whose folder is not defined.\r\nIf ASOL.Nephrite.WebAPI.Contracts.ModelFunctionQueryBase.FolderId is not entered, default value is used.\r\nThis is an optional parameter for specific scenarios.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "StoredParamsId",
                        "in": "query",
                        "description": "Identifier of predefined set of parameters which are stored in dedicated entity with identifier no. 1496.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ReturnLogDetail",
                        "in": "query",
                        "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.IFunctionResult log detail should be part of the message.",
                        "schema": {
                            "$ref": "#/components/schemas/ReturnFunctionLogDetailType"
                        },
                        "example": "error"
                    }
                ],
                "requestBody": {
                    "description": "Parameters of the function.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GeneralImportFunctionBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IFunctionResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/DataTransfers/Exports/FormReports/{reportId}/Pdf": {
            "post": {
                "tags": [
                    "DataTransfers"
                ],
                "summary": "Exports records to PDF via a form report.\r\nA record or a collection of records to export has to be specified in a payload.\r\nA class of records corresponds to a class of a report that is specified in the route parameter reportId.\r\n\r\nIf the report contains any parameter, its name and value have to be specified in a payload.",
                "parameters": [
                    {
                        "name": "reportId",
                        "in": "path",
                        "description": "Unique identifier of a form report.",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "CheckCrc",
                        "in": "query",
                        "description": "Check CRC of exported file after file is downloaded from application server of Helios.\r\nThis can consume some additional time.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "ASOL-WebAPI-Period",
                        "in": "header",
                        "description": "<br>\r\n            If this header is specified, request will be processed in context of specified period(s). \r\n            More headers with this name may be specified to set more kinds of period in one call.\r\n            \r\n<br></para>\r\n            Values of standard period kinds can be:\r\n            <para><br>\r\n            Accounting=0x0000000100000000000000000000000000000000000000000000000000000000\r\n            Calendar=0x0000000080000000000000000000000000000000000000000000000000000000\r\n            <br>The hex string is a code of period.<br>\r\n            Values of custom period kinds uses a syntax like: \r\n            <br>\r\n            Custom|HumanResources=2022-02-01T00:00:00Z\r\n            <br>It means the code of period is composite one. First \"Custom\" key must be specified and after separator char ('|') is the custom period code itself.<br>\r\n            To get period codes call GET /api/v{N}/Configuration/Periods endpoint.\r\n            ",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "description": "Payload of the request.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExportFilePdfFormRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Records was exported to PDF file and the file was returned in response body as content. \r\nThe content-type is \"application/pdf\" and the suggested file name is returned in Content-Disposition header.",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method Not Allowed"
                    },
                    "406": {
                        "description": "Not Acceptable"
                    },
                    "429": {
                        "description": "Too Many Requests"
                    },
                    "500": {
                        "description": "Server Error"
                    },
                    "501": {
                        "description": "Server Error"
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/DataTransfers/Exports/BrowseReports/{reportId}/Pdf": {
            "post": {
                "tags": [
                    "DataTransfers"
                ],
                "summary": "Exports records to PDF via a browse report.\r\nAn optional collection of records to export can be specified in a payload.\r\nA class of records, as well as the class of a folder, filter, etc. corresponds to the class of the report that is specified in the route parameter reportId.\r\n\r\nIf the report contains any parameter, its name and value have to be specified in a payload.",
                "parameters": [
                    {
                        "name": "reportId",
                        "in": "path",
                        "description": "Unique identifier of a browse report.",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "CheckCrc",
                        "in": "query",
                        "description": "Check CRC of exported file after file is downloaded from application server of Helios.\r\nThis can consume some additional time.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "ASOL-WebAPI-Period",
                        "in": "header",
                        "description": "<br>\r\n            If this header is specified, request will be processed in context of specified period(s). \r\n            More headers with this name may be specified to set more kinds of period in one call.\r\n            \r\n<br></para>\r\n            Values of standard period kinds can be:\r\n            <para><br>\r\n            Accounting=0x0000000100000000000000000000000000000000000000000000000000000000\r\n            Calendar=0x0000000080000000000000000000000000000000000000000000000000000000\r\n            <br>The hex string is a code of period.<br>\r\n            Values of custom period kinds uses a syntax like: \r\n            <br>\r\n            Custom|HumanResources=2022-02-01T00:00:00Z\r\n            <br>It means the code of period is composite one. First \"Custom\" key must be specified and after separator char ('|') is the custom period code itself.<br>\r\n            To get period codes call GET /api/v{N}/Configuration/Periods endpoint.\r\n            ",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "description": "Payload of the request.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExportFilePdfBrowseRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Records was exported to PDF file and the file was returned in response body as content. \r\nThe content-type is \"application/pdf\" and the suggested file name is returned in Content-Disposition header.",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method Not Allowed"
                    },
                    "406": {
                        "description": "Not Acceptable"
                    },
                    "429": {
                        "description": "Too Many Requests"
                    },
                    "500": {
                        "description": "Server Error"
                    },
                    "501": {
                        "description": "Server Error"
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/DataTransfers/Exports/Browse/{classId}/Pdf": {
            "post": {
                "tags": [
                    "DataTransfers"
                ],
                "summary": "Exports records to PDF via a default browse base template. \r\nA default browse base template is either a template of an implicit view of a current user if it is defined,\r\nor a default browse base template for a class.\r\n\r\nAn optional collection of records to export can be specified in a payload.\r\nA class of records, as well as the class of a folder, filter, template, etc. corresponds to the class in the route parameter classId.\r\n\r\nIf the default browse base template contains inner filter that contains any parameter, its name and have to be specified in a payload.",
                "parameters": [
                    {
                        "name": "classId",
                        "in": "path",
                        "description": "Unique identifier of a class.",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "CheckCrc",
                        "in": "query",
                        "description": "Check CRC of exported file after file is downloaded from application server of Helios.\r\nThis can consume some additional time.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "ASOL-WebAPI-Period",
                        "in": "header",
                        "description": "<br>\r\n            If this header is specified, request will be processed in context of specified period(s). \r\n            More headers with this name may be specified to set more kinds of period in one call.\r\n            \r\n<br></para>\r\n            Values of standard period kinds can be:\r\n            <para><br>\r\n            Accounting=0x0000000100000000000000000000000000000000000000000000000000000000\r\n            Calendar=0x0000000080000000000000000000000000000000000000000000000000000000\r\n            <br>The hex string is a code of period.<br>\r\n            Values of custom period kinds uses a syntax like: \r\n            <br>\r\n            Custom|HumanResources=2022-02-01T00:00:00Z\r\n            <br>It means the code of period is composite one. First \"Custom\" key must be specified and after separator char ('|') is the custom period code itself.<br>\r\n            To get period codes call GET /api/v{N}/Configuration/Periods endpoint.\r\n            ",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "description": "Payload of the request.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExportFilePdfBrowseRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Records was exported to PDF file and the file was returned in response body as content. \r\nThe content-type is \"application/pdf\" and the suggested file name is returned in Content-Disposition header.",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method Not Allowed"
                    },
                    "406": {
                        "description": "Not Acceptable"
                    },
                    "429": {
                        "description": "Too Many Requests"
                    },
                    "500": {
                        "description": "Server Error"
                    },
                    "501": {
                        "description": "Server Error"
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/DataTransfers/Exports/Browse/{classSymbolicName}/Pdf": {
            "post": {
                "tags": [
                    "DataTransfers"
                ],
                "summary": "Exports records to PDF via a default browse base template.\r\nA default browse base template is either a template of an implicit view of a current user if it is defined,\r\nor a default browse base template for a class.\r\n\r\nAn optional collection of records to export can be specified in a payload.\r\nA class of records, as well as the class of a folder, filter, template, etc. corresponds to the class in the route parameter classSymbolicName.\r\n\r\nIf the default browse base template contains inner filter that contains any parameter, its name and have to be specified in a payload.",
                "parameters": [
                    {
                        "name": "classSymbolicName",
                        "in": "path",
                        "description": "Symbolic name of a class. It is assumed that the author is Asseco Solutions.",
                        "required": true,
                        "schema": {
                            "maxLength": 255,
                            "minLength": 1,
                            "pattern": "^[a-z]*$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "CheckCrc",
                        "in": "query",
                        "description": "Check CRC of exported file after file is downloaded from application server of Helios.\r\nThis can consume some additional time.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "ASOL-WebAPI-Period",
                        "in": "header",
                        "description": "<br>\r\n            If this header is specified, request will be processed in context of specified period(s). \r\n            More headers with this name may be specified to set more kinds of period in one call.\r\n            \r\n<br></para>\r\n            Values of standard period kinds can be:\r\n            <para><br>\r\n            Accounting=0x0000000100000000000000000000000000000000000000000000000000000000\r\n            Calendar=0x0000000080000000000000000000000000000000000000000000000000000000\r\n            <br>The hex string is a code of period.<br>\r\n            Values of custom period kinds uses a syntax like: \r\n            <br>\r\n            Custom|HumanResources=2022-02-01T00:00:00Z\r\n            <br>It means the code of period is composite one. First \"Custom\" key must be specified and after separator char ('|') is the custom period code itself.<br>\r\n            To get period codes call GET /api/v{N}/Configuration/Periods endpoint.\r\n            ",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "description": "Payload of the request.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExportFilePdfBrowseRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Records was exported to PDF file and the file was returned in response body as content. \r\nThe content-type is \"application/pdf\" and the suggested file name is returned in Content-Disposition header.",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method Not Allowed"
                    },
                    "406": {
                        "description": "Not Acceptable"
                    },
                    "429": {
                        "description": "Too Many Requests"
                    },
                    "500": {
                        "description": "Server Error"
                    },
                    "501": {
                        "description": "Server Error"
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/DataTransfers/Exports/Browse/{AuthorSymbolicName}/{classSymbolicName}/Pdf": {
            "post": {
                "tags": [
                    "DataTransfers"
                ],
                "summary": "Exports records to PDF via a default browse base template.\r\nA default browse base template is either a template of an implicit view of a current user if it is defined,\r\nor a default browse base template for a class.\r\n\r\nAn optional collection of records to export can be specified in a payload.\r\nA class of records, as well as the class of a folder, filter, template, etc. corresponds to the class in the route parameters authorSymbolicName/classSymbolicName.\r\n\r\nIf the default browse base template contains inner filter that contains any parameter, its name and have to be specified in a payload.",
                "parameters": [
                    {
                        "name": "authorSymbolicName",
                        "in": "path",
                        "description": "Symbolic name of an author of the class (classSymbolicName).",
                        "required": true,
                        "schema": {
                            "maxLength": 255,
                            "minLength": 1,
                            "pattern": "^[a-z]*$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "classSymbolicName",
                        "in": "path",
                        "description": "Symbolic name of a class.",
                        "required": true,
                        "schema": {
                            "maxLength": 255,
                            "minLength": 1,
                            "pattern": "^[a-z]*$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "CheckCrc",
                        "in": "query",
                        "description": "Check CRC of exported file after file is downloaded from application server of Helios.\r\nThis can consume some additional time.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "ASOL-WebAPI-Period",
                        "in": "header",
                        "description": "<br>\r\n            If this header is specified, request will be processed in context of specified period(s). \r\n            More headers with this name may be specified to set more kinds of period in one call.\r\n            \r\n<br></para>\r\n            Values of standard period kinds can be:\r\n            <para><br>\r\n            Accounting=0x0000000100000000000000000000000000000000000000000000000000000000\r\n            Calendar=0x0000000080000000000000000000000000000000000000000000000000000000\r\n            <br>The hex string is a code of period.<br>\r\n            Values of custom period kinds uses a syntax like: \r\n            <br>\r\n            Custom|HumanResources=2022-02-01T00:00:00Z\r\n            <br>It means the code of period is composite one. First \"Custom\" key must be specified and after separator char ('|') is the custom period code itself.<br>\r\n            To get period codes call GET /api/v{N}/Configuration/Periods endpoint.\r\n            ",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "description": "Payload of the request.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExportFilePdfBrowseRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Records was exported to PDF file and the file was returned in response body as content. \r\nThe content-type is \"application/pdf\" and the suggested file name is returned in Content-Disposition header.",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method Not Allowed"
                    },
                    "406": {
                        "description": "Not Acceptable"
                    },
                    "429": {
                        "description": "Too Many Requests"
                    },
                    "500": {
                        "description": "Server Error"
                    },
                    "501": {
                        "description": "Server Error"
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Documents/ExternalDocuments": {
            "get": {
                "tags": [
                    "Documents"
                ],
                "summary": "Reads external documents according to query parameters.",
                "parameters": [
                    {
                        "name": "FileName",
                        "in": "query",
                        "description": "Name of file.\r\n<br>\r\nIncluding the '%' character in the parameter value causes the comparison operator \"LIKE\" to be used instead of \"EQUALS\"\r\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "State",
                        "in": "query",
                        "description": "State of document (custom valuated attribute, it may differ for every customer).\r\nUse data values of a defined attribute valuation to query documents of the requested state.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Location",
                        "in": "query",
                        "description": "Location of external document.",
                        "schema": {
                            "$ref": "#/components/schemas/ExtDocLocation"
                        }
                    },
                    {
                        "name": "Reference",
                        "in": "query",
                        "description": "A reference code of document.\r\n<br>\r\nIncluding the '%' character in the parameter value causes the comparison operator \"LIKE\" to be used instead of \"EQUALS\"\r\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Name",
                        "in": "query",
                        "description": "Name of a document. \r\n<br>\r\nIncluding the '%' character in the parameter value causes the comparison operator \"LIKE\" to be used instead of \"EQUALS\"\r\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Skip",
                        "in": "query",
                        "description": "Number of rows which are skipped during retrieval of data.\r\nIf not specified, no rows are skipped. It means, the first row on the first page is displayed at the top of the page.",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "example": 0
                        },
                        "example": 0
                    },
                    {
                        "name": "Top",
                        "in": "query",
                        "description": "Page size.\r\nIf not specified, 100 is used",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32",
                            "example": 100
                        },
                        "example": 100
                    },
                    {
                        "name": "FolderId",
                        "in": "query",
                        "description": "Folder identifier where to get documents from. If not set, a condition on a folder will not be applied.",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "Timestamp",
                        "in": "query",
                        "description": "If set, documents with timestamps greater than this timestamp are returned.",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "FileContent",
                        "in": "query",
                        "description": "If true, content of external document is returned too. Default true.",
                        "schema": {
                            "type": "boolean",
                            "example": true
                        },
                        "example": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalDocumentsResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Documents/ExternalDocuments/{id}": {
            "get": {
                "tags": [
                    "Documents"
                ],
                "summary": "Reads an external document according to query parameters.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of external document",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "FileContent",
                        "in": "query",
                        "description": "If true, content of external document is returned too. Default true.",
                        "schema": {
                            "type": "boolean",
                            "example": true
                        },
                        "example": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalDocumentItemResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Documents/DMSDocuments": {
            "get": {
                "tags": [
                    "Documents"
                ],
                "summary": "Reads the valid DMS documents according to query parameters.",
                "parameters": [
                    {
                        "name": "FileName",
                        "in": "query",
                        "description": "Physical name of file.\r\n<br>\r\nIncluding the '%' character in the parameter value causes the comparison operator \"LIKE\" to be used instead of \"EQUALS\"\r\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Version",
                        "in": "query",
                        "description": "Version of document.",
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "name": "State",
                        "in": "query",
                        "description": "State of document (custom valuated attribute, it may differ for every customer).\r\nUse data values of a defined attribute valuation to query documents of the requested state.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Reference",
                        "in": "query",
                        "description": "A reference code of document.\r\n<br>\r\nIncluding the '%' character in the parameter value causes the comparison operator \"LIKE\" to be used instead of \"EQUALS\"\r\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Name",
                        "in": "query",
                        "description": "Name of a document. \r\n<br>\r\nIncluding the '%' character in the parameter value causes the comparison operator \"LIKE\" to be used instead of \"EQUALS\"\r\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Skip",
                        "in": "query",
                        "description": "Number of rows which are skipped during retrieval of data.\r\nIf not specified, no rows are skipped. It means, the first row on the first page is displayed at the top of the page.",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "example": 0
                        },
                        "example": 0
                    },
                    {
                        "name": "Top",
                        "in": "query",
                        "description": "Page size.\r\nIf not specified, 100 is used",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32",
                            "example": 100
                        },
                        "example": 100
                    },
                    {
                        "name": "FolderId",
                        "in": "query",
                        "description": "Folder identifier where to get documents from. If not set, a condition on a folder will not be applied.",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "Timestamp",
                        "in": "query",
                        "description": "If set, documents with timestamps greater than this timestamp are returned.",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "FileContent",
                        "in": "query",
                        "description": "If true, content of external document is returned too. Default true.",
                        "schema": {
                            "type": "boolean",
                            "example": true
                        },
                        "example": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DMSDocumentsResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Documents/DMSDocuments/{id}": {
            "get": {
                "tags": [
                    "Documents"
                ],
                "summary": "Reads DMS a document according to query parameters.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of external document",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "FileContent",
                        "in": "query",
                        "description": "If true, content of external document is returned too. Default true.",
                        "schema": {
                            "type": "boolean",
                            "example": true
                        },
                        "example": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DMSDocumentItemResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Documents/ManagedDocuments": {
            "get": {
                "tags": [
                    "Documents"
                ],
                "summary": "Reads the valid main managed documents according to query parameters.",
                "parameters": [
                    {
                        "name": "FileName",
                        "in": "query",
                        "description": "Physical name of file.\r\n<br>\r\nIncluding the '%' character in the parameter value causes the comparison operator \"LIKE\" to be used instead of \"EQUALS\"\r\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Reference",
                        "in": "query",
                        "description": "A reference code of document.\r\n<br>\r\nIncluding the '%' character in the parameter value causes the comparison operator \"LIKE\" to be used instead of \"EQUALS\"\r\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Name",
                        "in": "query",
                        "description": "Name of a document. \r\n<br>\r\nIncluding the '%' character in the parameter value causes the comparison operator \"LIKE\" to be used instead of \"EQUALS\"\r\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Skip",
                        "in": "query",
                        "description": "Number of rows which are skipped during retrieval of data.\r\nIf not specified, no rows are skipped. It means, the first row on the first page is displayed at the top of the page.",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "example": 0
                        },
                        "example": 0
                    },
                    {
                        "name": "Top",
                        "in": "query",
                        "description": "Page size.\r\nIf not specified, 100 is used",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32",
                            "example": 100
                        },
                        "example": 100
                    },
                    {
                        "name": "FolderId",
                        "in": "query",
                        "description": "Folder identifier where to get documents from. If not set, a condition on a folder will not be applied.",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "Timestamp",
                        "in": "query",
                        "description": "If set, documents with timestamps greater than this timestamp are returned.",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "FileContent",
                        "in": "query",
                        "description": "If true, content of external document is returned too. Default true.",
                        "schema": {
                            "type": "boolean",
                            "example": true
                        },
                        "example": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ManagedDocumentsResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Documents/ManagedDocuments/{id}": {
            "get": {
                "tags": [
                    "Documents"
                ],
                "summary": "Reads a managed document according to query parameters.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Identifier of a managed document",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "FileContent",
                        "in": "query",
                        "description": "If true, content of external document is returned too. Default true.",
                        "schema": {
                            "type": "boolean",
                            "example": true
                        },
                        "example": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ManagedDocumentItemResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Files/Upload": {
            "post": {
                "tags": [
                    "Files"
                ],
                "summary": "Uploads a file to the Web API server temp directory. \r\nBeware! Uploaded file is kept limited time only! See query parameters for more information.",
                "parameters": [
                    {
                        "name": "Priority",
                        "in": "query",
                        "description": "The priority for keeping the cache entry in the cache during a memory pressure tokened cleanup. Possible values: low, normal, high, neverRemove.",
                        "schema": {
                            "$ref": "#/components/schemas/CacheItemPriority"
                        },
                        "example": "normal"
                    },
                    {
                        "name": "AbsoluteExpirationRelativeToNow",
                        "in": "query",
                        "description": "Defines an absolute expiration time (in minutes), relative to time when a cache entry was stored.",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 60
                        },
                        "example": 60
                    },
                    {
                        "name": "SlidingExpiration",
                        "in": "query",
                        "description": "Defines how long (in minutes) the cache entry can be inactive (e.g. not accessed) before it will be removed. \r\nThis will not extend the entry lifetime beyond the absolute expiration (if set).",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        },
                        "example": 10
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "Select file up to 20 MB",
                                        "format": "binary"
                                    }
                                }
                            },
                            "encoding": {
                                "ContentType": {
                                    "style": "form"
                                },
                                "ContentDisposition": {
                                    "style": "form"
                                },
                                "Headers": {
                                    "style": "form"
                                },
                                "Length": {
                                    "style": "form"
                                },
                                "Name": {
                                    "style": "form"
                                },
                                "FileName": {
                                    "style": "form"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UploadedFileResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Files/UploadMoreFiles": {
            "post": {
                "tags": [
                    "Files"
                ],
                "summary": "Uploads files to the WebAPI server temp directory.\r\nBeware! Uploaded files are kept limited time only! See query parameters for more information.",
                "parameters": [
                    {
                        "name": "Priority",
                        "in": "query",
                        "description": "The priority for keeping the cache entry in the cache during a memory pressure tokened cleanup. Possible values: low, normal, high, neverRemove.",
                        "schema": {
                            "$ref": "#/components/schemas/CacheItemPriority"
                        },
                        "example": "normal"
                    },
                    {
                        "name": "AbsoluteExpirationRelativeToNow",
                        "in": "query",
                        "description": "Defines an absolute expiration time (in minutes), relative to time when a cache entry was stored.",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 60
                        },
                        "example": 60
                    },
                    {
                        "name": "SlidingExpiration",
                        "in": "query",
                        "description": "Defines how long (in minutes) the cache entry can be inactive (e.g. not accessed) before it will be removed. \r\nThis will not extend the entry lifetime beyond the absolute expiration (if set).",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        },
                        "example": 10
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "files": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        },
                                        "description": "Select files up to 100 MB",
                                        "nullable": true
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UploadFilesCollectionResult{UploadedFileResult}"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Files/UploadLargeFile": {
            "post": {
                "tags": [
                    "Files"
                ],
                "summary": "Uploads a file to the WebAPI server temp directory. File size limit is 1 GB.\r\nFile is passed as \"multipart/form-data\", however body with those file is read by a stream reader continuously.\r\nBeware! Uploaded file is kept limited time only! See query parameters for more information.",
                "parameters": [
                    {
                        "name": "Priority",
                        "in": "query",
                        "description": "The priority for keeping the cache entry in the cache during a memory pressure tokened cleanup. Possible values: low, normal, high, neverRemove.",
                        "schema": {
                            "$ref": "#/components/schemas/CacheItemPriority"
                        },
                        "example": "normal"
                    },
                    {
                        "name": "AbsoluteExpirationRelativeToNow",
                        "in": "query",
                        "description": "Defines an absolute expiration time (in minutes), relative to time when a cache entry was stored.",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 60
                        },
                        "example": 60
                    },
                    {
                        "name": "SlidingExpiration",
                        "in": "query",
                        "description": "Defines how long (in minutes) the cache entry can be inactive (e.g. not accessed) before it will be removed. \r\nThis will not extend the entry lifetime beyond the absolute expiration (if set).",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 10
                        },
                        "example": 10
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UploadedFileResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Files/UploadToHelios": {
            "post": {
                "tags": [
                    "Files"
                ],
                "summary": "Uploads a file to the Helios Nephrite application server temp directory (\"Upload\").",
                "parameters": [
                    {
                        "name": "CheckCrc",
                        "in": "query",
                        "description": "If true, content CRC of an uploaded file is checked while uploading file to Helios Nephrite application server.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "Select file up to 20 MB",
                                        "format": "binary"
                                    }
                                }
                            },
                            "encoding": {
                                "ContentType": {
                                    "style": "form"
                                },
                                "ContentDisposition": {
                                    "style": "form"
                                },
                                "Headers": {
                                    "style": "form"
                                },
                                "Length": {
                                    "style": "form"
                                },
                                "Name": {
                                    "style": "form"
                                },
                                "FileName": {
                                    "style": "form"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UploadedFileResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Files/UploadMoreFilesToHelios": {
            "post": {
                "tags": [
                    "Files"
                ],
                "summary": "Uploads files to the Helios Nephrite application server temp directory (\"Upload\").",
                "parameters": [
                    {
                        "name": "CheckCrc",
                        "in": "query",
                        "description": "If true, content CRC of an uploaded file is checked while uploading file to Helios Nephrite application server.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "files": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        },
                                        "description": "Select files up to 100 MB",
                                        "nullable": true
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UploadFilesCollectionResult{UploadedFileResult}"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Files/UploadLargeFileToHelios": {
            "post": {
                "tags": [
                    "Files"
                ],
                "summary": "Uploads a file to the Helios Nephrite application server temp directory (\"Upload\"). File size limit is 1 GB.\r\nFile is passed as \"multipart/form-data\", however body with those file is read by a stream reader continuously.",
                "parameters": [
                    {
                        "name": "CheckCrc",
                        "in": "query",
                        "description": "If true, content CRC of an uploaded file is checked while uploading file to Helios Nephrite application server.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UploadedFileResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Generic/browse/{classId}": {
            "get": {
                "tags": [
                    "Generic"
                ],
                "summary": "Gets collection of records according to parameters.",
                "description": "Sample request:\r\n            \r\n    GET /api/v1/Generic/browse/214?Id=18256",
                "parameters": [
                    {
                        "name": "classId",
                        "in": "path",
                        "description": "Class/Entity unique identifier.",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "FolderId",
                        "in": "query",
                        "description": "Folder where records to get are stored.\r\nIf zero or null, default folder is used.",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "Id",
                        "in": "query",
                        "description": "<br>\r\n            Gets or sets identifier of template or view which is used to browse data.\r\n            0 or unspecified value means a user default template or view is used.\r\n            ",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "Type",
                        "in": "query",
                        "description": "<br>\r\n            Type of a browse. Default is ASOL.Nephrite.WebAPI.Contracts.BrowseType.Template.\r\n            ",
                        "schema": {
                            "$ref": "#/components/schemas/BrowseType"
                        }
                    },
                    {
                        "name": "Filter",
                        "in": "query",
                        "description": "<br>\r\n            Filter expression to get data.\r\n            \r\n<br>\r\n            THIS PROPERTY'S NOT SUPPORTED YET! DON'T USE IT AT ALL! IT IS IGNORED!\r\n            INSTEAD, USE A PREDEFINED FILTER (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) or filter which is a part of a browse template (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            ",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "FilterId",
                        "in": "query",
                        "description": "Unique identifier of a predefined filter to get data.",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "FilterParams",
                        "in": "query",
                        "description": "<br>Optional. It has to be specified when a filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId.\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: ?FilterParams=Code='ABC'&FilterParams=Price=123.56&FilterParams=issueDate=2021-11-03T00:00:00&FilterParams=Description&FilterParams=Code=null\r\n            ",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "TemplateFilterParams",
                        "in": "query",
                        "description": "<br>Optional. It has to be specified when a browse template filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is part of a browse template filter definition (default one for a current user or specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: TemplateFilterParams=Code='ABC'&TemplateFilterParams=Price=123.56&TemplateFilterParams=issueDate=2021-11-03T00:00:00&TemplateFilterParams=Description&TemplateFilterParams=Code=null\r\n            ",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "OrderBy",
                        "in": "query",
                        "description": "Sort order rules for returned data.\r\nRules have to match a column definition of template which is used to retrieve data.\r\nFormat is: \"[template column name] [sort direction]\", e.g.: ?orderBy=name desc,hireDate. Also \"asc\" can be used for more clarity.\r\nIf neither \"desc\" nor \"asc\" is used, \"asc\" is used by default.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "TotalCount",
                        "in": "query",
                        "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the total number of rows.\r\nDefault is false.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "Count",
                        "in": "query",
                        "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the number of rows on current page..\r\nDefault is true.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "Skip",
                        "in": "query",
                        "description": "Number of rows which are skipped during retrieval of data.\r\nIf not specified, no rows are skipped. It means, the first row on the first page is displayed at the top of the page.",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "example": 0
                        },
                        "example": 0
                    },
                    {
                        "name": "Top",
                        "in": "query",
                        "description": "Page size.\r\nIf not specified, default user settings will be used.",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32",
                            "example": 100
                        },
                        "example": 100
                    },
                    {
                        "name": "ASOL-WebAPI-Period",
                        "in": "header",
                        "description": "<br>\r\n             If this header is specified, request will be processed in context of specified period. More headers with this name may be specified.\r\n             \r\n<br></para>\r\n             Values can be:\r\n             <para><br>\r\n             Accounting=0x0000000100000000000000000000000000000000000000000000000000000000\r\n             Calendar=0x0000000080000000000000000000000000000000000000000000000000000000\r\n             <br>The hex string is a code of period.<br>\r\n             To get period codes call GET /api/vX/Configuration/Periods endpoint.\r\n             ",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Records was retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BrowseResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Generic/browse/{authorSymbolicName}/{classSymbolicName}": {
            "get": {
                "tags": [
                    "Generic"
                ],
                "summary": "Gets collection of records according to parameters.",
                "description": "Sample request:\r\n            \r\n    GET api/v1/Generic/browse/ASOL/CustomerOrders?Id=18256",
                "parameters": [
                    {
                        "name": "authorSymbolicName",
                        "in": "path",
                        "description": "Symbolic name of an development author.",
                        "required": true,
                        "schema": {
                            "minLength": 3,
                            "pattern": "^[a-z]*$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "classSymbolicName",
                        "in": "path",
                        "description": "Class/Entity symbolic name in plural.",
                        "required": true,
                        "schema": {
                            "minLength": 3,
                            "pattern": "^[a-z]*$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "FolderId",
                        "in": "query",
                        "description": "Folder where records to get are stored.\r\nIf zero or null, default folder is used.",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "Id",
                        "in": "query",
                        "description": "<br>\r\n            Gets or sets identifier of template or view which is used to browse data.\r\n            0 or unspecified value means a user default template or view is used.\r\n            ",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "Type",
                        "in": "query",
                        "description": "<br>\r\n            Type of a browse. Default is ASOL.Nephrite.WebAPI.Contracts.BrowseType.Template.\r\n            ",
                        "schema": {
                            "$ref": "#/components/schemas/BrowseType"
                        }
                    },
                    {
                        "name": "Filter",
                        "in": "query",
                        "description": "<br>\r\n            Filter expression to get data.\r\n            \r\n<br>\r\n            THIS PROPERTY'S NOT SUPPORTED YET! DON'T USE IT AT ALL! IT IS IGNORED!\r\n            INSTEAD, USE A PREDEFINED FILTER (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) or filter which is a part of a browse template (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            ",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "FilterId",
                        "in": "query",
                        "description": "Unique identifier of a predefined filter to get data.",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "FilterParams",
                        "in": "query",
                        "description": "<br>Optional. It has to be specified when a filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId.\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: ?FilterParams=Code='ABC'&FilterParams=Price=123.56&FilterParams=issueDate=2021-11-03T00:00:00&FilterParams=Description&FilterParams=Code=null\r\n            ",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "TemplateFilterParams",
                        "in": "query",
                        "description": "<br>Optional. It has to be specified when a browse template filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is part of a browse template filter definition (default one for a current user or specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: TemplateFilterParams=Code='ABC'&TemplateFilterParams=Price=123.56&TemplateFilterParams=issueDate=2021-11-03T00:00:00&TemplateFilterParams=Description&TemplateFilterParams=Code=null\r\n            ",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "OrderBy",
                        "in": "query",
                        "description": "Sort order rules for returned data.\r\nRules have to match a column definition of template which is used to retrieve data.\r\nFormat is: \"[template column name] [sort direction]\", e.g.: ?orderBy=name desc,hireDate. Also \"asc\" can be used for more clarity.\r\nIf neither \"desc\" nor \"asc\" is used, \"asc\" is used by default.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "TotalCount",
                        "in": "query",
                        "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the total number of rows.\r\nDefault is false.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "Count",
                        "in": "query",
                        "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the number of rows on current page..\r\nDefault is true.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "Skip",
                        "in": "query",
                        "description": "Number of rows which are skipped during retrieval of data.\r\nIf not specified, no rows are skipped. It means, the first row on the first page is displayed at the top of the page.",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "example": 0
                        },
                        "example": 0
                    },
                    {
                        "name": "Top",
                        "in": "query",
                        "description": "Page size.\r\nIf not specified, default user settings will be used.",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32",
                            "example": 100
                        },
                        "example": 100
                    },
                    {
                        "name": "ASOL-WebAPI-Period",
                        "in": "header",
                        "description": "<br>\r\n             If this header is specified, request will be processed in context of specified period. More headers with this name may be specified.\r\n             \r\n<br></para>\r\n             Values can be:\r\n             <para><br>\r\n             Accounting=0x0000000100000000000000000000000000000000000000000000000000000000\r\n             Calendar=0x0000000080000000000000000000000000000000000000000000000000000000\r\n             <br>The hex string is a code of period.<br>\r\n             To get period codes call GET /api/vX/Configuration/Periods endpoint.\r\n             ",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Records was retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BrowseResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Generic/browse/{classSymbolicName}": {
            "get": {
                "tags": [
                    "Generic"
                ],
                "summary": "Gets collection of records according to parameters.",
                "description": "Sample request:\r\n            \r\n    GET api/v1/Generic/browse/CustomerOrders?Id=18256",
                "parameters": [
                    {
                        "name": "classSymbolicName",
                        "in": "path",
                        "description": "Class/Entity symbolic name in plural. Author no. 1 (Asseco solutions) is used.",
                        "required": true,
                        "schema": {
                            "minLength": 3,
                            "pattern": "^[a-z]*$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "FolderId",
                        "in": "query",
                        "description": "Folder where records to get are stored.\r\nIf zero or null, default folder is used.",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "Id",
                        "in": "query",
                        "description": "<br>\r\n            Gets or sets identifier of template or view which is used to browse data.\r\n            0 or unspecified value means a user default template or view is used.\r\n            ",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "Type",
                        "in": "query",
                        "description": "<br>\r\n            Type of a browse. Default is ASOL.Nephrite.WebAPI.Contracts.BrowseType.Template.\r\n            ",
                        "schema": {
                            "$ref": "#/components/schemas/BrowseType"
                        }
                    },
                    {
                        "name": "Filter",
                        "in": "query",
                        "description": "<br>\r\n            Filter expression to get data.\r\n            \r\n<br>\r\n            THIS PROPERTY'S NOT SUPPORTED YET! DON'T USE IT AT ALL! IT IS IGNORED!\r\n            INSTEAD, USE A PREDEFINED FILTER (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) or filter which is a part of a browse template (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            ",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "FilterId",
                        "in": "query",
                        "description": "Unique identifier of a predefined filter to get data.",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "FilterParams",
                        "in": "query",
                        "description": "<br>Optional. It has to be specified when a filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.FilterId.\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: ?FilterParams=Code='ABC'&FilterParams=Price=123.56&FilterParams=issueDate=2021-11-03T00:00:00&FilterParams=Description&FilterParams=Code=null\r\n            ",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "TemplateFilterParams",
                        "in": "query",
                        "description": "<br>Optional. It has to be specified when a browse template filter definition (ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id) contains variable arguments.\r\n<br>\r\n            Variable arguments of a filter which is part of a browse template filter definition (default one for a current user or specified in ASOL.Nephrite.WebAPI.Contracts.QueryParameters.BrowseQueryParameters.Id).\r\n            They have to be specified when this filter contains at least one parameter which value is specified as a variable (a named parameter).\r\n            This value has to be specified at the moment when the filter is applied.\r\n            If value of parameter is not set, it will be marked as skipped, see Description in example.\r\n            If value is null, a null value will be passed to parameter. \r\n            \r\n<br>\r\n            Example: TemplateFilterParams=Code='ABC'&TemplateFilterParams=Price=123.56&TemplateFilterParams=issueDate=2021-11-03T00:00:00&TemplateFilterParams=Description&TemplateFilterParams=Code=null\r\n            ",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "OrderBy",
                        "in": "query",
                        "description": "Sort order rules for returned data.\r\nRules have to match a column definition of template which is used to retrieve data.\r\nFormat is: \"[template column name] [sort direction]\", e.g.: ?orderBy=name desc,hireDate. Also \"asc\" can be used for more clarity.\r\nIf neither \"desc\" nor \"asc\" is used, \"asc\" is used by default.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "TotalCount",
                        "in": "query",
                        "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the total number of rows.\r\nDefault is false.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "Count",
                        "in": "query",
                        "description": "Gets or sets if ASOL.Nephrite.WebAPI.Contracts.BrowseResponse should contain the number of rows on current page..\r\nDefault is true.",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "Skip",
                        "in": "query",
                        "description": "Number of rows which are skipped during retrieval of data.\r\nIf not specified, no rows are skipped. It means, the first row on the first page is displayed at the top of the page.",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "example": 0
                        },
                        "example": 0
                    },
                    {
                        "name": "Top",
                        "in": "query",
                        "description": "Page size.\r\nIf not specified, default user settings will be used.",
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32",
                            "example": 100
                        },
                        "example": 100
                    },
                    {
                        "name": "ASOL-WebAPI-Period",
                        "in": "header",
                        "description": "<br>\r\n             If this header is specified, request will be processed in context of specified period. More headers with this name may be specified.\r\n             \r\n<br></para>\r\n             Values can be:\r\n             <para><br>\r\n             Accounting=0x0000000100000000000000000000000000000000000000000000000000000000\r\n             Calendar=0x0000000080000000000000000000000000000000000000000000000000000000\r\n             <br>The hex string is a code of period.<br>\r\n             To get period codes call GET /api/vX/Configuration/Periods endpoint.\r\n             ",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Records was retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BrowseResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Organizace": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data o všech organizacích.",
                "parameters": [
                    {
                        "name": "NazevDoplnujici",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Jmeno",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Prijmeni",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Ico",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "NazevOrganizace",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Dic",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "PravniForma",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "DatumNarozeni",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "RodneCislo",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "OrganizaceIdEx",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "CisloDokladu",
                        "in": "query",
                        "description": "CZ: Číslo dokladu",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "TypDokladu",
                        "in": "query",
                        "description": "CZ: Typ dokladu",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizaceGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Vytvoří novou organizaci.",
                "requestBody": {
                    "description": "CZ: Atributy k vytvoření organizace.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizacePostPutRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizacePostPutResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Organizace/{id}": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data jedné organizace.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "CZ: Id Organizace",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizaceGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Aktualizuje organizaci.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "CZ: Id Organizace",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "CZ: Atributy k aktualizace organizace.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizacePostPutRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizacePostPutResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/AdresaUpdate": {
            "put": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Aktualizuje adresu.",
                "requestBody": {
                    "description": "CZ: Atributy pro aktualizaci adresy.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AdresaUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdresaResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/CiselnikEvidencniTyp": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data o všech evidenčních typech.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvidenceTypeGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/CiselnikKodDph/{platnostOd}": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data sazby DPH.",
                "parameters": [
                    {
                        "name": "platnostOd",
                        "in": "path",
                        "description": "CZ: Platnost Od",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VatRateGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/CiselnikTypUhrady": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte typy úhrad.",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentTypeGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Dobropis": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte dobropisy.",
                "parameters": [
                    {
                        "name": "DobropisId",
                        "in": "query",
                        "description": "Interní identifikátor Dobropisu",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 781254
                        },
                        "example": 781254
                    },
                    {
                        "name": "DobropisIdEx",
                        "in": "query",
                        "description": "Externí identifikátor Dobropisu",
                        "schema": {
                            "type": "string",
                            "example": "FVX_0001"
                        },
                        "example": "FVX_0001"
                    },
                    {
                        "name": "Organizace.NazevDoplnujici",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.Jmeno",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.Prijmeni",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.Ico",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.NazevOrganizace",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.Dic",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.PravniForma",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.DatumNarozeni",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "Organizace.RodneCislo",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.OrganizaceIdEx",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.CisloDokladu",
                        "in": "query",
                        "description": "CZ: Číslo dokladu",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.TypDokladu",
                        "in": "query",
                        "description": "CZ: Typ dokladu",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Stav",
                        "in": "query",
                        "description": "Stav",
                        "schema": {
                            "type": "string",
                            "example": "Stav"
                        },
                        "example": "Stav"
                    },
                    {
                        "name": "StavUhrazenosti",
                        "in": "query",
                        "description": "Stav uhrazenosti",
                        "schema": {
                            "type": "string",
                            "example": "StavUhrazenosti"
                        },
                        "example": "StavUhrazenosti"
                    },
                    {
                        "name": "VariabilniSymbol",
                        "in": "query",
                        "description": "Variabilní symbol",
                        "schema": {
                            "type": "string",
                            "example": "VarSymbol"
                        },
                        "example": "VarSymbol"
                    },
                    {
                        "name": "ParovaciSymbol",
                        "in": "query",
                        "description": "Parovací symbol",
                        "schema": {
                            "type": "string",
                            "example": "ParovaciSymbol"
                        },
                        "example": "ParovaciSymbol"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNoteGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Vytvoří nový dobropis.",
                "requestBody": {
                    "description": "CZ: Atributy k vytvoření dobropisu.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreditNotePostPutRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNotePostPutResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/KontacePrvodokladu": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte kontaci prvodokladu.",
                "parameters": [
                    {
                        "name": "interniCislo",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "kontaceNazev",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PvdAllocationGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/FakturaVydana": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte faktury vydané.",
                "parameters": [
                    {
                        "name": "FakturaId",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "FakturaIdEx",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.NazevDoplnujici",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.Jmeno",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.Prijmeni",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.Ico",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.NazevOrganizace",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.Dic",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.PravniForma",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.DatumNarozeni",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "Organizace.RodneCislo",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.OrganizaceIdEx",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.CisloDokladu",
                        "in": "query",
                        "description": "CZ: Číslo dokladu",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.TypDokladu",
                        "in": "query",
                        "description": "CZ: Typ dokladu",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Stav",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "StavUhrazenosti",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "VariabilniSymbol",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ParovaciSymbol",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvoicesIssuedGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Vytvoří novou fakturu vydanou.",
                "requestBody": {
                    "description": "CZ: Atributy k vytvoření faktury vydané.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvoicesIssuedPostPutRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvoicesIssuedPostPutResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Kniha": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data o všech knihách předpisů.",
                "parameters": [
                    {
                        "name": "EvidencniTyp",
                        "in": "query",
                        "description": "CZ: Evidenční typ (pole)",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReceivablesLedgerGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Platce": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data o všech plátcích, popřípadě je vyfiltruje podle vstupního modelu.",
                "parameters": [
                    {
                        "name": "KodKnihy",
                        "in": "query",
                        "description": "CZ: Kód knihy poplatku",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 777
                        },
                        "example": 777
                    },
                    {
                        "name": "PlatceId",
                        "in": "query",
                        "description": "CZ: Interní identifikátor Plátce (parametr má přednost před ostatními parametry)",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 781254
                        },
                        "example": 781254
                    },
                    {
                        "name": "PlatceIdEx",
                        "in": "query",
                        "description": "CZ: Externí identifikátor Plátce (parametr má přednost před ostatními parametry)",
                        "schema": {
                            "type": "string",
                            "example": "PIX_0001"
                        },
                        "example": "PIX_0001"
                    },
                    {
                        "name": "VariabilniSymbol",
                        "in": "query",
                        "description": "CZ: Variabilní symbol",
                        "schema": {
                            "type": "string",
                            "example": "7770000001"
                        },
                        "example": "7770000001"
                    },
                    {
                        "name": "RodneCislo",
                        "in": "query",
                        "description": "CZ: Rodné číslo",
                        "schema": {
                            "type": "string",
                            "example": "010101/0001"
                        },
                        "example": "010101/0001"
                    },
                    {
                        "name": "CisloDokladu",
                        "in": "query",
                        "description": "CZ: Číslo dokladu (max. 30 znaků)",
                        "schema": {
                            "type": "string",
                            "example": "112233445566"
                        },
                        "example": "112233445566"
                    },
                    {
                        "name": "TypDokladu",
                        "in": "query",
                        "description": "CZ: Typ dokladu - občanský průkaz (O) nebo cestovní pas (C)",
                        "schema": {
                            "type": "string",
                            "example": "C"
                        },
                        "example": "C"
                    },
                    {
                        "name": "DatumNarozeni",
                        "in": "query",
                        "description": "CZ: Datum narození (formát rrrr-mm-dd)",
                        "schema": {
                            "type": "string",
                            "example": "2001-01-29"
                        },
                        "example": "2001-01-29"
                    },
                    {
                        "name": "Dic",
                        "in": "query",
                        "description": "CZ: DIČ",
                        "schema": {
                            "type": "string",
                            "example": "CZ11111111111"
                        },
                        "example": "CZ11111111111"
                    },
                    {
                        "name": "Ico",
                        "in": "query",
                        "description": "CZ: IČ",
                        "schema": {
                            "type": "string",
                            "example": "22222222222"
                        },
                        "example": "22222222222"
                    },
                    {
                        "name": "Jmeno",
                        "in": "query",
                        "description": "CZ: Jméno",
                        "schema": {
                            "type": "string",
                            "example": "Josef"
                        },
                        "example": "Josef"
                    },
                    {
                        "name": "Prijmeni",
                        "in": "query",
                        "description": "CZ: Příjmení",
                        "schema": {
                            "type": "string",
                            "example": "Novák"
                        },
                        "example": "Novák"
                    },
                    {
                        "name": "NazevDoplnujici",
                        "in": "query",
                        "description": "CZ: Název doplňující",
                        "schema": {
                            "type": "string",
                            "example": ""
                        },
                        "example": ""
                    },
                    {
                        "name": "NazevOrganizace",
                        "in": "query",
                        "description": "CZ: Název organizace",
                        "schema": {
                            "type": "string",
                            "example": ""
                        },
                        "example": ""
                    },
                    {
                        "name": "OrganizaceIdEx",
                        "in": "query",
                        "description": "CZ: Externí identifikátor organizace",
                        "schema": {
                            "type": "string",
                            "example": ""
                        },
                        "example": ""
                    },
                    {
                        "name": "Adresa.Ulice",
                        "in": "query",
                        "description": "Nazev ulice",
                        "schema": {
                            "type": "string",
                            "example": "Nefritová"
                        },
                        "example": "Nefritová"
                    },
                    {
                        "name": "Adresa.Obec",
                        "in": "query",
                        "description": "Název obce",
                        "schema": {
                            "type": "string",
                            "example": "Plzeň"
                        },
                        "example": "Plzeň"
                    },
                    {
                        "name": "Adresa.Psc",
                        "in": "query",
                        "description": "PSČ",
                        "schema": {
                            "type": "string",
                            "example": "32300"
                        },
                        "example": "32300"
                    },
                    {
                        "name": "Adresa.CastObce",
                        "in": "query",
                        "description": "Část obce",
                        "schema": {
                            "type": "string",
                            "example": "Bolevec"
                        },
                        "example": "Bolevec"
                    },
                    {
                        "name": "Adresa.CisloCp",
                        "in": "query",
                        "description": "Číslo popisné (domovní)",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 263
                        },
                        "example": 263
                    },
                    {
                        "name": "Adresa.CisloCo",
                        "in": "query",
                        "description": "Cislo orientacni",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 15
                        },
                        "example": 15
                    },
                    {
                        "name": "Adresa.PismenoCo",
                        "in": "query",
                        "description": "Pismeno cisla orientacniho",
                        "schema": {
                            "type": "string",
                            "example": "a"
                        },
                        "example": "a"
                    },
                    {
                        "name": "Adresa.IdCentralniReg",
                        "in": "query",
                        "description": "Identifikátor adresního místa (centr. registr)",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 156358
                        },
                        "example": 156358
                    },
                    {
                        "name": "Adresa.TypAdresy",
                        "in": "query",
                        "description": "Typ adresy (hodnota z atr. kod v číselníku TypAdresy)",
                        "schema": {
                            "type": "string",
                            "example": "Trvalá"
                        },
                        "example": "Trvalá"
                    },
                    {
                        "name": "Adresa.TypCislaDomovniho",
                        "in": "query",
                        "description": "Typ cisla domovniho",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 1
                        },
                        "example": 1
                    },
                    {
                        "name": "Adresa.MestskyObvod",
                        "in": "query",
                        "description": "Městský obvod",
                        "schema": {
                            "type": "string",
                            "example": "Plzeň 1"
                        },
                        "example": "Plzeň 1"
                    },
                    {
                        "name": "Adresa.Okres",
                        "in": "query",
                        "description": "Okres",
                        "schema": {
                            "type": "string",
                            "example": "Plzeň město"
                        },
                        "example": "Plzeň město"
                    },
                    {
                        "name": "Adresa.StavAdresy",
                        "in": "query",
                        "description": "Stav Adresy",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "example": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PayerGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Založí nového plátce",
                "requestBody": {
                    "description": "CZ: Vstupní model",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PayerPostPutRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PayerPostPutResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Platce/Pes": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data o všech plátcích za psy, popřípadě je vyfiltruje podle vstupního modelu.",
                "parameters": [
                    {
                        "name": "znamka",
                        "in": "query",
                        "description": "Číslo známky.",
                        "schema": {
                            "type": "string",
                            "example": "501"
                        },
                        "example": "501"
                    },
                    {
                        "name": "cip",
                        "in": "query",
                        "description": "Evidenční čislo čipu.",
                        "schema": {
                            "type": "string",
                            "example": "622F24"
                        },
                        "example": "622F24"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PayerGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Platce/{id}": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data o plátci podle interního identifikátoru.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PayerGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Platce/{externId}": {
            "put": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Aktualizuje plátce podle externího identifikátoru.",
                "parameters": [
                    {
                        "name": "externId",
                        "in": "path",
                        "description": "CZ: Vstupní externí identifikátor",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "CZ: Vstupní model",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PayerPostPutRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PayerPostPutResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Platce/{internId}": {
            "put": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Aktualizuje plátce podle interního identifikátoru.",
                "parameters": [
                    {
                        "name": "internId",
                        "in": "path",
                        "description": "CZ: Vstupní interní identifikátor",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "CZ: Vstupní model",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PayerPostPutRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PayerPostPutResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Platce/Invalidate/{externId}": {
            "put": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Zneplatnění plátce podle externího identifikátoru.",
                "parameters": [
                    {
                        "name": "externId",
                        "in": "path",
                        "description": "CZ: Vstupní externí identifikátor",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "CZ: Vstupní model",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PayerInvalidateGetRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PayerPostPutResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Platce/Invalidate/{internId}": {
            "put": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Zneplatnění plátce podle interního identifikátoru.",
                "parameters": [
                    {
                        "name": "internId",
                        "in": "path",
                        "description": "CZ: Vstupní interní identifikátor",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "CZ: Vstupní model",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PayerInvalidateGetRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PayerPostPutResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Predpis": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data o všech předpisech, popřípadě je vyfiltruje podle vstupního modelu.",
                "parameters": [
                    {
                        "name": "KodKnihy",
                        "in": "query",
                        "description": "CZ: Kód knihy",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "PredpisId",
                        "in": "query",
                        "description": "CZ: ID dokladu",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "PredpisIdEx",
                        "in": "query",
                        "description": "CZ: ID dokladu externí",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "PlatceId",
                        "in": "query",
                        "description": "CZ: ID plátce",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "PlatceIdEx",
                        "in": "query",
                        "description": "CZ: ID plátce externí",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "VariabilniSymbol",
                        "in": "query",
                        "description": "CZ: Variabilní symbol",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ParovaciSymbol",
                        "in": "query",
                        "description": "CZ: Parovací symbol",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PayerprescriptionGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Založí nový předpis",
                "requestBody": {
                    "description": "CZ: Vstupní model",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PayerprescriptionPostPutRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PayerprescriptionPostPutResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Predpis/{externId}": {
            "put": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Aktualizuje předpis podle externího identifikátoru.",
                "parameters": [
                    {
                        "name": "externId",
                        "in": "path",
                        "description": "CZ: Vstupní externí identifikátor",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "CZ: Vstupní model",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PayerprescriptionPostPutRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PayerprescriptionPostPutResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Predpis/{internId}": {
            "put": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Aktualizuje předpis podle interního identifikátoru.",
                "parameters": [
                    {
                        "name": "internId",
                        "in": "path",
                        "description": "CZ: Vstupní interní identifikátor",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "CZ: Vstupní model",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PayerprescriptionPostPutRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PayerprescriptionPostPutResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Predpis/Invalidate/{externId}": {
            "put": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ:Stornování předpisu podle externího identifikátoru.",
                "parameters": [
                    {
                        "name": "externId",
                        "in": "path",
                        "description": "CZ: Vstupní externí identifikátor",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PayerprescriptionPostPutResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Predpis/Invalidate/{internId}": {
            "put": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Stornování předpisu podle interního identifikátoru.",
                "parameters": [
                    {
                        "name": "internId",
                        "in": "path",
                        "description": "CZ: Vstupní interní identifikátor",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PayerprescriptionPostPutResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Preplatek": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data o všech přeplatcích, popřípadě je vyfiltruje podle vstupního modelu.",
                "parameters": [
                    {
                        "name": "KodKnihy",
                        "in": "query",
                        "description": "CZ: Kód knihy",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "PreplatekId",
                        "in": "query",
                        "description": "CZ: ID dokladu",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "PreplatekIdEx",
                        "in": "query",
                        "description": "CZ: ID dokladu externí",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "PlatceId",
                        "in": "query",
                        "description": "CZ: ID plátce",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "PlatceIdEx",
                        "in": "query",
                        "description": "CZ: ID plátce externí",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "VariabilniSymbol",
                        "in": "query",
                        "description": "CZ: Variabilní symbol",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ParovaciSymbol",
                        "in": "query",
                        "description": "CZ: Parovací symbol",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OverpaymentGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Založí nový přeplatek",
                "requestBody": {
                    "description": "CZ: Vstupní model",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OverpaymentPostPutRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OverpaymentPostPutResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Preplatek/{id}": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data o přeplatku podle identifikátoru.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "CZ: Vstupní identifikátor",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OverpaymentGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Preplatek/{externId}": {
            "put": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Aktualizuje přeplatek podle externího identifikátoru.",
                "parameters": [
                    {
                        "name": "externId",
                        "in": "path",
                        "description": "CZ: Vstupní externí identifikátor",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "CZ: Vstupní model",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OverpaymentPostPutRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OverpaymentPostPutResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Preplatek/{internId}": {
            "put": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Aktualizuje přeplatek podle interního identifikátoru.",
                "parameters": [
                    {
                        "name": "internId",
                        "in": "path",
                        "description": "CZ: Vstupní interní identifikátor",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "CZ: Vstupní model",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OverpaymentPostPutRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OverpaymentPostPutResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Preplatek/Invalidate/{externId}": {
            "put": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ:Stornování přeplatku podle externího identifikátoru.",
                "parameters": [
                    {
                        "name": "externId",
                        "in": "path",
                        "description": "CZ: Vstupní externí identifikátor",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OverpaymentPostPutResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Preplatek/Invalidate/{internId}": {
            "put": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Stornování přeplatku podle interního identifikátoru.",
                "parameters": [
                    {
                        "name": "internId",
                        "in": "path",
                        "description": "CZ: Vstupní interní identifikátor",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OverpaymentPostPutResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Mistnost": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data o všech místnostech.",
                "parameters": [
                    {
                        "name": "MistnostCislo",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "MistnostNazev",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoomGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Mistnost/{id}": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data jedné místnosti.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "CZ: Id Místnosti",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RoomGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Zamestnanec": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data o všech zaměstnancích.",
                "parameters": [
                    {
                        "name": "OsobniCislo",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Login",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Jmeno",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Prijmeni",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmployeeGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Zamestnanec/{id}": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data jednoho zaměstnance.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "CZ: Id Zaměstnance",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmployeeGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Majetek": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data o všech majetcích, popřípadě vyfiltruje výstup podle vstupních query params.",
                "parameters": [
                    {
                        "name": "MistnostId",
                        "in": "query",
                        "description": "CZ: Id majetku.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "Mistnost.MistnostCislo",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Mistnost.MistnostNazev",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ZodpovednaOsoba.OsobniCislo",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ZodpovednaOsoba.Login",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ZodpovednaOsoba.Jmeno",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ZodpovednaOsoba.Prijmeni",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ZodpovednaOsobaId",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "TypMajetku",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FixedAssetGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Majetek/{type}/{id}": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data jednoho majetku.",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "CZ: Typ majetku (10; 20; 30)",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "CZ: Id Majetku",
                        "required": true,
                        "schema": {
                            "maximum": 2147483647,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FixedAssetGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Uhrada/Faktura": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data o všech úhradách faktůr, popřípadě vyfiltruje výstup podle vstupních query params.",
                "parameters": [
                    {
                        "name": "FakturaId",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "FakturaIdEx",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.NazevDoplnujici",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.Jmeno",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.Prijmeni",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.Ico",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.NazevOrganizace",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.Dic",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.PravniForma",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.DatumNarozeni",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "Organizace.RodneCislo",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.OrganizaceIdEx",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.CisloDokladu",
                        "in": "query",
                        "description": "CZ: Číslo dokladu",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.TypDokladu",
                        "in": "query",
                        "description": "CZ: Typ dokladu",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "VariabilniSymbol",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Uhrada/Dobropis": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data o všech úhradách dobropisů, popřípadě vyfiltruje výstup podle vstupních query params.",
                "parameters": [
                    {
                        "name": "DobropisId",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "DobropisIdEx",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.NazevDoplnujici",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.Jmeno",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.Prijmeni",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.Ico",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.NazevOrganizace",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.Dic",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.PravniForma",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.DatumNarozeni",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "Organizace.RodneCislo",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.OrganizaceIdEx",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.CisloDokladu",
                        "in": "query",
                        "description": "CZ: Číslo dokladu",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Organizace.TypDokladu",
                        "in": "query",
                        "description": "CZ: Typ dokladu",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "VariabilniSymbol",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Uhrada/Predpis": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data o všech úhradách předpisů, popřípadě vyfiltruje výstup podle vstupních query params.",
                "parameters": [
                    {
                        "name": "KodKnihy",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "PredpisId",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "PredpisIdEx",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "PlatceId",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "PlatceIdEx",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Uhrada/Preplatek": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data o všech úhradách přeplatků, popřípadě vyfiltruje výstup podle vstupních query params.",
                "parameters": [
                    {
                        "name": "KodKnihy",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "PreplatekId",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "PreplatekIdEx",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "PlatceId",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "PlatceIdEx",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Uhrada/OdDatumu": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data o všech úhradách, popřípadě vyfiltruje výstup podle vstupních query params.",
                "parameters": [
                    {
                        "name": "DatumOd",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "DatumDo",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "KodKnihy",
                        "in": "query",
                        "description": "CZ: Kódy knih oddělené čárkou.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        },
        "/api/v1/Customer/Pantheon/Uhrada/Smazana/OdDatumu": {
            "get": {
                "tags": [
                    "Pantheon"
                ],
                "summary": "CZ: Přečte data o všech smazaných úhradách, popřípadě vyfiltruje výstup podle vstupních query params.",
                "parameters": [
                    {
                        "name": "DatumOd",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "DatumDo",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "KodKnihy",
                        "in": "query",
                        "description": "CZ: Kódy knih oddělené čárkou.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentGetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Client Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProblemDetails"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "basicAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Adresa": {
                "type": "object",
                "properties": {
                    "typAdresy": {
                        "type": "string",
                        "nullable": true
                    },
                    "cisloCo": {
                        "type": "string",
                        "nullable": true
                    },
                    "cisloCp": {
                        "type": "string",
                        "nullable": true
                    },
                    "obec": {
                        "type": "string",
                        "nullable": true
                    },
                    "castObce": {
                        "type": "string",
                        "nullable": true
                    },
                    "mestskyObvod": {
                        "type": "string",
                        "nullable": true
                    },
                    "okres": {
                        "type": "string",
                        "nullable": true
                    },
                    "pismenoCo": {
                        "type": "string",
                        "nullable": true
                    },
                    "psc": {
                        "type": "string",
                        "nullable": true
                    },
                    "stavAdresy": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "typCislaDomovniho": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "ulice": {
                        "type": "string",
                        "nullable": true
                    },
                    "organizaceIdEx": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "AdresaResponse": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "CZ: Chybové hlášky",
                        "nullable": true
                    },
                    "typAdresy": {
                        "type": "string",
                        "nullable": true
                    },
                    "cisloCo": {
                        "type": "string",
                        "nullable": true
                    },
                    "cisloCp": {
                        "type": "string",
                        "nullable": true
                    },
                    "obec": {
                        "type": "string",
                        "nullable": true
                    },
                    "castObce": {
                        "type": "string",
                        "nullable": true
                    },
                    "mestskyObvod": {
                        "type": "string",
                        "nullable": true
                    },
                    "okres": {
                        "type": "string",
                        "nullable": true
                    },
                    "pismenoCo": {
                        "type": "string",
                        "nullable": true
                    },
                    "psc": {
                        "type": "string",
                        "nullable": true
                    },
                    "stavAdresy": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "typCislaDomovniho": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "ulice": {
                        "type": "string",
                        "nullable": true
                    },
                    "organizaceIdEx": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "CZ: Návratový typ/Response pro Adresu"
            },
            "AdresaUpdate": {
                "type": "object",
                "properties": {
                    "typAdresy": {
                        "type": "string",
                        "nullable": true
                    },
                    "cisloCo": {
                        "type": "string",
                        "nullable": true
                    },
                    "cisloCp": {
                        "type": "string",
                        "nullable": true
                    },
                    "obec": {
                        "type": "string",
                        "nullable": true
                    },
                    "castObce": {
                        "type": "string",
                        "nullable": true
                    },
                    "mestskyObvod": {
                        "type": "string",
                        "nullable": true
                    },
                    "okres": {
                        "type": "string",
                        "nullable": true
                    },
                    "pismenoCo": {
                        "type": "string",
                        "nullable": true
                    },
                    "psc": {
                        "type": "string",
                        "nullable": true
                    },
                    "stavAdresy": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "typCislaDomovniho": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "ulice": {
                        "type": "string",
                        "nullable": true
                    },
                    "organizaceIdEx": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "CZ: Vstupní typ/Request pro aktualizaci adresy"
            },
            "AttributesCollection{IAttributeResult}": {
                "type": "object",
                "properties": {
                    "attributeItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IAttributeResult"
                        },
                        "description": "Collection of user defined attributes.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Class which contains collection of of user defined attributes."
            },
            "AttributesCollection{IUserDefinedAttributeResult}": {
                "type": "object",
                "properties": {
                    "attributeItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IUserDefinedAttributeResult"
                        },
                        "description": "Collection of user defined attributes.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Class which contains collection of of user defined attributes."
            },
            "AuthenticateRequest": {
                "type": "object",
                "properties": {
                    "userName": {
                        "type": "string",
                        "description": "<br>\r\n            Gets or sets the user name (login name or login email).\r\n            \r\n<br>\r\n            It can be unspecified when ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UseWindowsAuthentication and ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UseCurrentUserCredentials is true, \r\n            otherwise it has to be filled.\r\n            ",
                        "nullable": true,
                        "example": "domain\name.surname"
                    },
                    "password": {
                        "type": "string",
                        "description": "<br>\r\n            Gets or sets the password.\r\n            \r\n<br>\r\n            It can be unspecified when ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UseWindowsAuthentication and ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UseCurrentUserCredentials is true, \r\n            otherwise it has to be filled.\r\n            ",
                        "nullable": true,
                        "example": "SecretPassword*01"
                    },
                    "useWindowsAuthentication": {
                        "type": "boolean",
                        "description": "<br>\r\n            If true, windows authentication is used to connect to HeG (System.Net.NetworkCredential are created and used to login). \r\n            If ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UseCurrentUserCredentials is true as well, ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UserName and ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.Password are ignored. \r\n            System.Net.CredentialCache.DefaultCredentials are used then.\r\n            \r\n<br>\r\n            If false, basic authentication using ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UserName  and ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.Password is used to connect to HeG.\r\n            \r\n<br>\r\n            This property must filled when default value is not specified in application settings \r\n            or if a different value should be used.\r\n            The application can be set such way, this property may not be set at all.\r\n            Contact administrator to ensure how to authenticate if needed. \r\n            ",
                        "example": false
                    },
                    "useCurrentUserCredentials": {
                        "type": "boolean",
                        "description": "<br>\r\n            This property is taken into account when ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UseWindowsAuthentication is true only.\r\n            System.Net.CredentialCache.DefaultCredentials are used instead of ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.UserName and ASOL.Nephrite.WebAPI.AuthProvider.Contracts.AuthenticateRequest.Password then.\r\n            \r\n<br>\r\n            This property must filled when default value is not specified in application settings \r\n            or if a different value should be used.\r\n            The application can be set such way, this property may not be set at all.\r\n            Contact administrator to ensure how to authenticate if needed. \r\n            ",
                        "example": false
                    },
                    "languageId": {
                        "type": "string",
                        "description": "<br>\r\n            Gets or sets the code of language (czech is CZ, slovak is SK, english is EN). \r\n            \r\n<br>\r\n            This property must filled when default language is not specified in application settings \r\n            or if a different language should be used.\r\n            The application can be set such way, this property may not be set at all.\r\n            Contact administrator to ensure how to authenticate if needed. \r\n            ",
                        "nullable": true,
                        "example": "CZ"
                    },
                    "dbProfile": {
                        "type": "string",
                        "description": "<br>\r\n            Gets or sets the db profile where the user is to be connected to.\r\n            \r\n<br>\r\n            This property must filled when default db profile is not specified in application settings\r\n             or if a different db profile should be used.\r\n            The application can be set such way, this property may not be set at all.\r\n            Contact administrator to ensure how to authenticate if needed. \r\n            ",
                        "nullable": true,
                        "example": "MySqlServer.TestDbProfile"
                    },
                    "serverURL": {
                        "type": "string",
                        "description": "<br>\r\n            Gets or sets the URL of application server.\r\n            \r\n<br>\r\n            This property must filled when default server URL is not specified in application settings\r\n            or if a different server be used.\r\n            The application can be set such way, this property may not be set at all.\r\n            Contact administrator to ensure how to authenticate if needed. \r\n            ",
                        "nullable": true,
                        "example": "http://testserever/testapp"
                    }
                },
                "additionalProperties": false,
                "description": "Model for authentication."
            },
            "AuthenticateResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "description": "If true, authention was successfull.",
                        "readOnly": true,
                        "example": true
                    },
                    "statusCode": {
                        "$ref": "#/components/schemas/HttpStatusCode"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "Error message in case of authentication was not successful..",
                        "nullable": true,
                        "example": "Some error message."
                    },
                    "userName": {
                        "type": "string",
                        "description": "Username to log-in.",
                        "nullable": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "Unique identifier to log-in. Something like token.",
                        "nullable": true,
                        "example": "UserId 31f49a7ddc18e97247308d5180ac684890f5a5c3442e0ab7115e037f6d6dd2f6"
                    }
                },
                "additionalProperties": false,
                "description": "Model for response of authentication."
            },
            "BrowseColumnInfo": {
                "type": "object",
                "properties": {
                    "columnName": {
                        "type": "string",
                        "description": "Gets or sets column name.",
                        "nullable": true
                    },
                    "visible": {
                        "type": "boolean",
                        "description": "Gets or sets column's visibility."
                    },
                    "headerText": {
                        "type": "string",
                        "description": "Gets or sets header text.",
                        "nullable": true
                    },
                    "dataFormat": {
                        "type": "string",
                        "description": "Defines the format how to display data.",
                        "nullable": true
                    },
                    "italica": {
                        "type": "boolean",
                        "description": "Is an Italica used for font?"
                    },
                    "bold": {
                        "type": "boolean",
                        "description": "Is a font bold?"
                    },
                    "underline": {
                        "type": "boolean",
                        "description": "Is an underline font used?"
                    },
                    "align": {
                        "type": "integer",
                        "description": "<list type=\"bullet\">\r\n  <listheader>Aligning of a column.</listheader>\r\n  <item>0 - Left</item>\r\n  <item>1 - Right</item>\r\n  <item>2 - Center</item>\r\n</list>",
                        "format": "int32"
                    },
                    "dataTypeRepo": {
                        "type": "string",
                        "description": "Data type of a column - repository definition.\r\n\"money\" , \"varchar\" , \"string\", \"datetime\", \"date\", \"time\", \"folder\", \"boolean\" , \"multilline_text\", \"text\", \"pointer\", \"binary\"",
                        "nullable": true
                    },
                    "fullDbName": {
                        "type": "string",
                        "description": "Full db name in a select command.",
                        "nullable": true
                    },
                    "relationNumber": {
                        "type": "integer",
                        "description": "If column ASOL.Nephrite.WebAPI.Contracts.BrowseColumnInfo.FullDbName represents a relation or column from related method, its number is stored on this property, otherwise null.",
                        "format": "int32",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Data structure represents information about one browse column."
            },
            "BrowseDataRowInfo": {
                "type": "object",
                "additionalProperties": false,
                "description": "Data structure representing non-formating (nonvisual) information about one browse row."
            },
            "BrowseGroupRowInfo": {
                "type": "object",
                "properties": {
                    "level": {
                        "type": "integer",
                        "description": "Level of a group.",
                        "format": "int32"
                    }
                },
                "additionalProperties": false,
                "description": "Data structure containing non-formating (nonvisual) information about one group row."
            },
            "BrowseResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "description": "Returned data as JSON Newtonsoft.Json.Linq.JArray.",
                        "nullable": true
                    },
                    "totalRowCount": {
                        "type": "integer",
                        "description": "Count of all rows for specified conditions. -1 if information is not accessible.",
                        "format": "int32"
                    },
                    "rowCount": {
                        "type": "integer",
                        "description": "Count of returned rows. -1 if information is not accessible.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "browseId": {
                        "type": "integer",
                        "description": "Identifier of template that was used to retrieve data.",
                        "format": "int32"
                    },
                    "browseName": {
                        "type": "string",
                        "description": "Name of template ASOL.Nephrite.WebAPI.Contracts.BrowseResponse.BrowseId.",
                        "nullable": true
                    },
                    "folderId": {
                        "type": "integer",
                        "description": "Folder where the retrieved data was stored. If zero, returned data belongs or may belong to more folders.",
                        "format": "int32"
                    },
                    "classId": {
                        "type": "integer",
                        "description": "Identifier of entity (class) where the retrieved data belongs to.",
                        "format": "int32"
                    },
                    "rowsType": {
                        "$ref": "#/components/schemas/RecordDataRowType"
                    },
                    "columnsInfo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BrowseColumnInfo"
                        },
                        "description": "Collection of column definitions of the retrieved data.",
                        "nullable": true
                    },
                    "rowsInfo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BrowseRowInfo"
                        },
                        "description": "Collection of row definitions of the retrieved data.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Response of for retrieval data requests (ASOL.Nephrite.WebAPI.Contracts.BrowseRequest)."
            },
            "BrowseRowInfo": {
                "type": "object",
                "properties": {
                    "dataRow": {
                        "$ref": "#/components/schemas/BrowseDataRowInfo"
                    },
                    "groupRow": {
                        "$ref": "#/components/schemas/BrowseGroupRowInfo"
                    },
                    "rowType": {
                        "$ref": "#/components/schemas/BrowseRowType"
                    }
                },
                "additionalProperties": false,
                "description": "The data row definition."
            },
            "BrowseRowType": {
                "enum": [
                    "dataRow",
                    "groupRow"
                ],
                "type": "string",
                "description": "Browse data row type."
            },
            "BrowseType": {
                "enum": [
                    "template",
                    "view"
                ],
                "type": "string",
                "description": "The browse type (template/view)."
            },
            "CacheItemPriority": {
                "enum": [
                    "low",
                    "normal",
                    "high",
                    "neverRemove"
                ],
                "type": "string"
            },
            "CreditNoteGetResponse": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreditNoteGetResponseElement"
                        },
                        "description": "CZ: Kolekce dobropisů.",
                        "nullable": true
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "CZ: Celkový počet záznamů.",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "description": "CZ: Počet záznamů.",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "CZ: Počet stránek.",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "CZ: Stránka",
                        "format": "int32"
                    }
                },
                "additionalProperties": false,
                "description": "API GET Customer/Pantheon/Dobropis RESPONSE"
            },
            "CreditNoteGetResponseElement": {
                "type": "object",
                "properties": {
                    "cisloJednaci": {
                        "type": "string",
                        "nullable": true
                    },
                    "datumDuzp": {
                        "type": "string",
                        "nullable": true
                    },
                    "datumPorizeni": {
                        "type": "string",
                        "nullable": true
                    },
                    "datumSplatnosti": {
                        "type": "string",
                        "nullable": true
                    },
                    "dobropisId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "dobropisIdEx": {
                        "type": "string",
                        "nullable": true
                    },
                    "konstantniSymbol": {
                        "type": "string",
                        "nullable": true
                    },
                    "organizaceOdberatel": {
                        "$ref": "#/components/schemas/OrganizaceGetResponseElement"
                    },
                    "organizacePrijemce": {
                        "$ref": "#/components/schemas/OrganizaceGetResponseElement"
                    },
                    "poznamka": {
                        "type": "string",
                        "nullable": true
                    },
                    "specifickySymbol": {
                        "type": "string",
                        "nullable": true
                    },
                    "stav": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "stavUhrazenosti": {
                        "type": "string",
                        "nullable": true
                    },
                    "variabilniSymbol": {
                        "type": "string",
                        "nullable": true
                    },
                    "zbyvaUhradit": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "kontaceHlavicka": {
                        "$ref": "#/components/schemas/PvdAllocationGetResponseElement"
                    },
                    "polozky": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Polozka"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CreditNotePostPutRequest": {
                "type": "object",
                "properties": {
                    "cisloJednaci": {
                        "type": "string",
                        "nullable": true
                    },
                    "cisloPoradace": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "datumDuzp": {
                        "type": "string",
                        "nullable": true
                    },
                    "datumPorizeni": {
                        "type": "string",
                        "nullable": true
                    },
                    "datumSplatnosti": {
                        "type": "string",
                        "nullable": true
                    },
                    "dobropisId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "dobropisIdEx": {
                        "type": "string",
                        "nullable": true
                    },
                    "konstantniSymbol": {
                        "type": "string",
                        "nullable": true
                    },
                    "organizace": {
                        "$ref": "#/components/schemas/OrganizaceGetResponseElement"
                    },
                    "organizace2": {
                        "$ref": "#/components/schemas/OrganizaceGetResponseElement"
                    },
                    "poznamka": {
                        "type": "string",
                        "nullable": true
                    },
                    "specifickySymbol": {
                        "type": "string",
                        "nullable": true
                    },
                    "typUhrady": {
                        "type": "string",
                        "nullable": true
                    },
                    "variabilniSymbol": {
                        "type": "string",
                        "nullable": true
                    },
                    "kontaceId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "polozky": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Polozka"
                        },
                        "nullable": true
                    },
                    "parovaciSymbol": {
                        "type": "string",
                        "nullable": true
                    },
                    "podkladovaFakturaId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "podkladovaFakturaIdEx": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CreditNotePostPutResponse": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "CZ: Chybové hlášky",
                        "nullable": true
                    },
                    "cisloJednaci": {
                        "type": "string",
                        "nullable": true
                    },
                    "datumDuzp": {
                        "type": "string",
                        "nullable": true
                    },
                    "datumPorizeni": {
                        "type": "string",
                        "nullable": true
                    },
                    "datumSplatnosti": {
                        "type": "string",
                        "nullable": true
                    },
                    "dobropisId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "dobropisIdEx": {
                        "type": "string",
                        "nullable": true
                    },
                    "konstantniSymbol": {
                        "type": "string",
                        "nullable": true
                    },
                    "organizaceOdberatel": {
                        "$ref": "#/components/schemas/OrganizaceGetResponseElement"
                    },
                    "organizacePrijemce": {
                        "$ref": "#/components/schemas/OrganizaceGetResponseElement"
                    },
                    "poznamka": {
                        "type": "string",
                        "nullable": true
                    },
                    "specifickySymbol": {
                        "type": "string",
                        "nullable": true
                    },
                    "stav": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "stavUhrazenosti": {
                        "type": "string",
                        "nullable": true
                    },
                    "variabilniSymbol": {
                        "type": "string",
                        "nullable": true
                    },
                    "zbyvaUhradit": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "kontaceHlavicka": {
                        "$ref": "#/components/schemas/PvdAllocationGetResponseElement"
                    },
                    "polozky": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Polozka"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "CurrentRecordPeriodResult": {
                "type": "object",
                "properties": {
                    "calendar": {
                        "$ref": "#/components/schemas/RecordPeriodItemResult"
                    },
                    "accounting": {
                        "$ref": "#/components/schemas/RecordPeriodItemResult"
                    },
                    "custom": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CustomRecordPeriodItemResult"
                        },
                        "description": "An accounting periods that is active for a current session.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Periods that are active for a current session."
            },
            "CustomRecordPeriodItemResult": {
                "type": "object",
                "properties": {
                    "kind": {
                        "type": "string",
                        "description": "Kind of a custom period.",
                        "nullable": true,
                        "example": "HumanResource"
                    },
                    "code": {
                        "type": "string",
                        "description": "Reference code of period",
                        "nullable": true,
                        "example": "1.12.2005"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of period (e.g. Accounting period)",
                        "nullable": true,
                        "example": "Human resources period"
                    },
                    "id": {
                        "type": "string",
                        "description": "Value of a custom period.",
                        "nullable": true,
                        "example": "1.12.2005"
                    }
                },
                "additionalProperties": false,
                "description": "Information about a custom period."
            },
            "DMSDocumentItemResult": {
                "type": "object",
                "properties": {
                    "state": {
                        "type": "string",
                        "description": "State of document (custom valuated attribute, it may differ for every customer).",
                        "nullable": true
                    },
                    "version": {
                        "type": "number",
                        "description": "Version of document.",
                        "format": "double",
                        "nullable": true
                    },
                    "fileName": {
                        "type": "string",
                        "description": "Physical name of file.",
                        "nullable": true
                    },
                    "effectiveDate": {
                        "type": "string",
                        "description": "Effective date of document.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "approved": {
                        "type": "boolean",
                        "description": "Is document approved?",
                        "nullable": true
                    },
                    "approvalDate": {
                        "type": "string",
                        "description": "Approval date of document.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "valid": {
                        "type": "boolean",
                        "description": "Is document Valid ?",
                        "nullable": true
                    },
                    "validFrom": {
                        "type": "string",
                        "description": "Document is valid from....",
                        "format": "date-time",
                        "nullable": true
                    },
                    "validTo": {
                        "type": "string",
                        "description": "Document is valid to....",
                        "format": "date-time",
                        "nullable": true
                    },
                    "id": {
                        "type": "integer",
                        "description": "Document's Id.",
                        "format": "int32"
                    },
                    "folderId": {
                        "type": "integer",
                        "description": "Document's folder Id.",
                        "format": "int32"
                    },
                    "reference": {
                        "type": "string",
                        "description": "A reference code of document.",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of document.",
                        "nullable": true
                    },
                    "fileContent": {
                        "type": "string",
                        "description": "Content (Base64 format).",
                        "nullable": true
                    },
                    "fileContentError": {
                        "type": "string",
                        "description": "Error message while content of file was downloaded. Null means no error occurred.",
                        "nullable": true
                    },
                    "fileContentLength": {
                        "type": "integer",
                        "description": "The length in bytes.",
                        "format": "int64",
                        "nullable": true
                    },
                    "timestamp": {
                        "type": "integer",
                        "description": "Document's timestamp as a number.",
                        "format": "int64",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Information about a response item of DMS document (Document Managed System document)."
            },
            "DMSDocumentsResult": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Count of ASOL.WebAPI.Core.DataTransfers.Contracts.Documents.DMSDocumentsResult.Documents.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "documents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DMSDocumentItemResult"
                        },
                        "description": "Collection of external documents.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Response for GET operation for DMS document (Document Managed System document)"
            },
            "DecimalDigitsConflict": {
                "enum": [
                    "dontCheck",
                    "round",
                    "error"
                ],
                "type": "string",
                "description": "Way how to solve a conflict in a number of decimal digits."
            },
            "DeletionDataMode": {
                "enum": [
                    "dontDelete",
                    "deleteAccordingToTheFilter",
                    "deleteAll"
                ],
                "type": "string",
                "description": "Ways how delete data in target class before import."
            },
            "EmployeeGetResponse": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EmployeeGetResponseElement"
                        },
                        "description": "CZ: Kolekce organizací.",
                        "nullable": true
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "CZ: Celkový počet záznamů.",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "description": "CZ: Počet záznamů.",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "CZ: Počet stránek.",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "CZ: Stránka",
                        "format": "int32"
                    }
                },
                "additionalProperties": false,
                "description": "API GET Customer/Pantheon/Zamestnanec RESPONSE\r\nAPI GET Customer/Pantheon/Zamestnanec/{id} RESPONSE"
            },
            "EmployeeGetResponseElement": {
                "type": "object",
                "properties": {
                    "osobniCislo": {
                        "type": "string",
                        "nullable": true
                    },
                    "zamestnanecId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "jmeno": {
                        "type": "string",
                        "nullable": true
                    },
                    "prijmeni": {
                        "type": "string",
                        "nullable": true
                    },
                    "login": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "EvidenceTypeGetResponse": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EvidenceTypeGetResponseElement"
                        },
                        "description": "CZ: Kolekce organizací.",
                        "nullable": true
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "CZ: Celkový počet záznamů.",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "description": "CZ: Počet záznamů.",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "CZ: Počet stránek.",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "CZ: Stránka",
                        "format": "int32"
                    }
                },
                "additionalProperties": false,
                "description": "API GET Customer/Pantheon/CiselnikEvidencniTyp RESPONSE\r\nAPI GET Customer/Pantheon/CiselnikEvidencniTyp/{id} RESPONSE"
            },
            "EvidenceTypeGetResponseElement": {
                "type": "object",
                "properties": {
                    "kod": {
                        "type": "string",
                        "nullable": true
                    },
                    "nazev": {
                        "type": "string",
                        "nullable": true
                    },
                    "jeMistniPoplatek": {
                        "type": "string",
                        "nullable": true
                    },
                    "jePrijemDleDanovehoRadu": {
                        "type": "string",
                        "nullable": true
                    },
                    "jeUctovatelny": {
                        "type": "string",
                        "nullable": true
                    },
                    "legislativa": {
                        "type": "string",
                        "nullable": true
                    },
                    "platnostOd": {
                        "type": "string",
                        "nullable": true
                    },
                    "platnostDo": {
                        "type": "string",
                        "nullable": true
                    },
                    "pouzeProEvidencniAgendu": {
                        "type": "string",
                        "nullable": true
                    },
                    "pouzivaKalendarPredpisu": {
                        "type": "string",
                        "nullable": true
                    },
                    "pouzivaKartuPrijmu": {
                        "type": "string",
                        "nullable": true
                    },
                    "pouzivaOpravnePolozky": {
                        "type": "string",
                        "nullable": true
                    },
                    "pouzivaPodrozvahu": {
                        "type": "string",
                        "nullable": true
                    },
                    "pouzivaStorno": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ExportFilePdfBrowseRequest": {
                "type": "object",
                "properties": {
                    "recordIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "description": "Collection of records to export.\r\nA class of records corresponds to a class of a report, or symbolic name, that is specified in the route. \r\nThe filter will be used to filter records to export.",
                        "nullable": true
                    },
                    "folderId": {
                        "maximum": 2147483647,
                        "minimum": 1,
                        "type": "integer",
                        "description": "An optional folder of records.\r\nIf set, it have to correspond with class of report, or symbolic name.\r\nThe filter will be used to filter records to export.",
                        "format": "int32",
                        "nullable": true
                    },
                    "filterId": {
                        "maximum": 2147483647,
                        "minimum": 1,
                        "type": "integer",
                        "description": "An optional filter identifier.\r\nIf set, the filter will be used to filter records to export.",
                        "format": "int32",
                        "nullable": true
                    },
                    "filterParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NameValueParam"
                        },
                        "description": "Optional filter parameters for a filter in FilterId parameter.",
                        "nullable": true
                    },
                    "reportParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NameValueParam"
                        },
                        "description": "Optional report parameters. \r\nThose parameters are determined either for parameters of a report itself or for parameters of a filter which is specified directly in the template.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Payload for export records to PDF via a browse report."
            },
            "ExportFilePdfFormRequest": {
                "required": [
                    "recordIds"
                ],
                "type": "object",
                "properties": {
                    "recordIds": {
                        "minItems": 1,
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        },
                        "description": "Collection of records to export.\r\nA class of records corresponds to a class of a report that is specified in the route."
                    },
                    "reportParams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NameValueParam"
                        },
                        "description": "Optional report parameters.\r\nThose parameters are determined for parameters of a report.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Payload for export records to PDF via a form report."
            },
            "ExtDocLocation": {
                "enum": [
                    "clientArea",
                    "publicArea",
                    "internalArea",
                    "applicationServerArea"
                ],
                "type": "string",
                "description": "Locations of external documents."
            },
            "ExternalDocumentItemResult": {
                "type": "object",
                "properties": {
                    "fileName": {
                        "type": "string",
                        "description": "Physical name of file.",
                        "nullable": true
                    },
                    "state": {
                        "type": "string",
                        "description": "State of document (custom valuated attribute, it may differ for every customer).",
                        "nullable": true
                    },
                    "location": {
                        "type": "string",
                        "description": "Location of external document.",
                        "nullable": true
                    },
                    "id": {
                        "type": "integer",
                        "description": "Document's Id.",
                        "format": "int32"
                    },
                    "folderId": {
                        "type": "integer",
                        "description": "Document's folder Id.",
                        "format": "int32"
                    },
                    "reference": {
                        "type": "string",
                        "description": "A reference code of document.",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of document.",
                        "nullable": true
                    },
                    "fileContent": {
                        "type": "string",
                        "description": "Content (Base64 format).",
                        "nullable": true
                    },
                    "fileContentError": {
                        "type": "string",
                        "description": "Error message while content of file was downloaded. Null means no error occurred.",
                        "nullable": true
                    },
                    "fileContentLength": {
                        "type": "integer",
                        "description": "The length in bytes.",
                        "format": "int64",
                        "nullable": true
                    },
                    "timestamp": {
                        "type": "integer",
                        "description": "Document's timestamp as a number.",
                        "format": "int64",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Information about a response item of external document."
            },
            "ExternalDocumentsResult": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Count of ASOL.WebAPI.Core.DataTransfers.Contracts.Documents.ExternalDocumentsResult.Documents.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "documents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExternalDocumentItemResult"
                        },
                        "description": "Collection of external documents.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Response for getting of external documents."
            },
            "FixedAssetGetResponse": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FixedAssetGetResponseElement"
                        },
                        "description": "CZ: Kolekce organizací.",
                        "nullable": true
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "CZ: Celkový počet záznamů.",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "description": "CZ: Počet záznamů.",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "CZ: Počet stránek.",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "CZ: Stránka",
                        "format": "int32"
                    }
                },
                "additionalProperties": false,
                "description": "API GET Customer/Pantheon/Majetek RESPONSE\r\nAPI GET Customer/Pantheon/Majetek/{type}/{id} RESPONSE"
            },
            "FixedAssetGetResponseElement": {
                "type": "object",
                "properties": {
                    "utvarId": {
                        "type": "integer",
                        "description": "CZ: Číslo útvaru.",
                        "format": "int32",
                        "nullable": true
                    },
                    "stav": {
                        "type": "integer",
                        "description": "CZ: Stav majetku: \r\n    1 - Převzat do evidence, \r\n    2 - Zařazen, \r\n    3 - Aktivní, \r\n    4 - Připraven k vyřazení, \r\n    5 - Vyřazen, \r\n    6 - Převeden, \r\n    7 - Stornován,\r\n    8 - Předimportován,\r\n    9 - Předzpracován.",
                        "format": "int32",
                        "nullable": true
                    },
                    "datumPorizeni": {
                        "type": "string",
                        "description": "CZ: Datum pořízení.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "datumVyrazeni": {
                        "type": "string",
                        "description": "CZ: Datum vyřazení.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "datumZarazeni": {
                        "type": "string",
                        "description": "CZ: Datum zařazení.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "inventarniCislo": {
                        "type": "string",
                        "description": "CZ: Inventární číslo.",
                        "nullable": true
                    },
                    "majetekId": {
                        "type": "integer",
                        "description": "CZ: Id majetku.",
                        "format": "int32",
                        "nullable": true
                    },
                    "nazev": {
                        "type": "string",
                        "description": "CZ: Název.",
                        "nullable": true
                    },
                    "vyrobniCislo": {
                        "type": "string",
                        "description": "CZ: Výrobní číslo.",
                        "nullable": true
                    },
                    "porizovaciCena": {
                        "type": "number",
                        "description": "CZ: Pořizovací cena.",
                        "format": "double",
                        "nullable": true
                    },
                    "aktualniCena": {
                        "type": "number",
                        "description": "CZ: Aktuální cena.",
                        "format": "double",
                        "nullable": true
                    },
                    "mistnost": {
                        "$ref": "#/components/schemas/RoomGetResponseElement"
                    },
                    "zodpovednaOsoba": {
                        "$ref": "#/components/schemas/EmployeeGetResponseElement"
                    }
                },
                "additionalProperties": false
            },
            "ForeignKeyRelationItemResult": {
                "required": [
                    "relationId",
                    "side"
                ],
                "type": "object",
                "properties": {
                    "record": {
                        "$ref": "#/components/schemas/RelatedRecordModelResult"
                    },
                    "side": {
                        "$ref": "#/components/schemas/RelationSide"
                    },
                    "relationId": {
                        "maximum": 2147483647,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Gets or sets unique relation identifier.\r\nCZ: Vrací nebo nastavuje číslo vztahu.",
                        "format": "int32"
                    },
                    "symbolicName": {
                        "type": "string",
                        "description": "Symbolic name of relation.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "A contract to hold information about record in a relation which is a foreign key."
            },
            "FunctionLog": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FunctionLogItem"
                        },
                        "description": "Gets or sets the collection of auditlog entries that belong to this auditlog.\r\nCZ: Vrací nebo nastavuje kolekci položek auditlogu, které jsou součástí auditlogu.",
                        "nullable": true
                    },
                    "id": {
                        "type": "integer",
                        "description": "Gets or sets unique identifier of a function log.",
                        "format": "int32"
                    },
                    "state": {
                        "$ref": "#/components/schemas/FunctionResultState"
                    }
                },
                "additionalProperties": false,
                "description": "Data structure representing a function log."
            },
            "FunctionLogItem": {
                "type": "object",
                "properties": {
                    "level": {
                        "$ref": "#/components/schemas/FunctionLogItemLevel"
                    },
                    "when": {
                        "type": "string",
                        "description": "Gets or sets date and time when function log item was written.",
                        "format": "date-time"
                    },
                    "referencedRecord": {
                        "$ref": "#/components/schemas/IRecordId"
                    },
                    "message": {
                        "type": "string",
                        "description": "Gets or sets text message of function log item.",
                        "nullable": true
                    },
                    "severity": {
                        "$ref": "#/components/schemas/FunctionLogItemSeverity"
                    },
                    "itemId": {
                        "type": "integer",
                        "description": "Gets or sets unique identifier of function log item.",
                        "format": "int32"
                    }
                },
                "additionalProperties": false,
                "description": "Data structure representing function log item."
            },
            "FunctionLogItemLevel": {
                "enum": [
                    "system",
                    "application"
                ],
                "type": "string",
                "description": "Level of a function log item."
            },
            "FunctionLogItemSeverity": {
                "enum": [
                    "info",
                    "warning",
                    "error"
                ],
                "type": "string",
                "description": "Severity of a function log item."
            },
            "FunctionResultState": {
                "enum": [
                    "success",
                    "successWithWarning",
                    "successWithError",
                    "failure"
                ],
                "type": "string",
                "description": "Enumeration of possible function result states."
            },
            "GeneralImportFunctionBody": {
                "type": "object",
                "properties": {
                    "params": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GeneralImportFunctionParamsItem"
                        },
                        "description": "Parameters of a function.",
                        "nullable": true
                    },
                    "recordIds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RecordId"
                        },
                        "description": "Gets or sets source records for a function run.\r\nOptional.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "A payload of the function. Typically function parameters if they are defined by the function.\r\nThe payload is passed by a request body.,"
            },
            "GeneralImportFunctionParamsItem": {
                "required": [
                    "dataSource"
                ],
                "type": "object",
                "properties": {
                    "targetFolderId": {
                        "type": "integer",
                        "description": "Unique identifier of the entity (class in terms of HeN), where",
                        "format": "int32",
                        "nullable": true
                    },
                    "deletionDataMode": {
                        "$ref": "#/components/schemas/DeletionDataMode"
                    },
                    "deletionDataFilterId": {
                        "type": "integer",
                        "description": "An unique identifier of a filter which is used to delete data. Set this property in case ASOL.WebAPI.Core.DataTransfers.Contracts.GeneralImportFunctionParamsItem.DeletionDataMode is ASOL.WebAPI.Core.DataTransfers.Contracts.DeletionDataMode.DeleteAccordingToTheFilter.",
                        "format": "int32",
                        "nullable": true
                    },
                    "transactionScope": {
                        "$ref": "#/components/schemas/TransactionScope"
                    },
                    "dataSource": {
                        "minLength": 1,
                        "type": "string",
                        "description": "<br>\r\n            Source of data to import.\r\n            \r\n<br>\r\n  <list type=\"bullet\">\r\n    <listheader>Possible values are:</listheader>\r\n    <item>S - import from file.  </item>\r\n    <item>D - import according to database command which is specified in a general import definition.</item>\r\n  </list>\r\n"
                    },
                    "successTargetFolder": {
                        "type": "string",
                        "description": "Path to folder where to move imported file if import was without any error.\r\nThis property can be filled when data are imported form file (ASOL.WebAPI.Core.DataTransfers.Contracts.GeneralImportFunctionParamsItem.DataSource is \"S\"), \r\nin case you want to move imported file to specific folder.\r\nBeware! Function works on application server with temporary copy of file. \r\nUploaded file on client side is not reachable by this functionality.",
                        "nullable": true
                    },
                    "failureTargetFolder": {
                        "type": "string",
                        "description": "Path to folder where to move imported file if import failed.\r\nThis property can be filled when data are imported form file (ASOL.WebAPI.Core.DataTransfers.Contracts.GeneralImportFunctionParamsItem.DataSource is \"S\"), \r\nin case you want to move imported file to specific folder.\r\nBeware! Function works on application server with temporary copy of file. \r\nUploaded file on client side is not reachable by this functionality.",
                        "nullable": true
                    },
                    "importFromRow": {
                        "type": "integer",
                        "description": "This property can be specified when data are imported form file (ASOL.WebAPI.Core.DataTransfers.Contracts.GeneralImportFunctionParamsItem.DataSource is \"S\") and several starting rows are to be omitted.\r\nAll rows which row number is lower than this value will be omitted.",
                        "format": "int32",
                        "nullable": true
                    },
                    "importToRow": {
                        "type": "integer",
                        "description": "This property can be specified when data are imported form file (ASOL.WebAPI.Core.DataTransfers.Contracts.GeneralImportFunctionParamsItem.DataSource is \"S\") and several rows at the end of file are to be omitted.\r\nAll rows which row number is greater than this value will be omitted.",
                        "format": "int32",
                        "nullable": true
                    },
                    "errorLimit": {
                        "type": "integer",
                        "description": "The value specifies number of rows imported with any failure (threshold) on which detection of failures is performed.\r\nWhen this threshold is reached, the execution is immediately canceled.\r\nThe value is to be understood as a guide value for entities with items.\r\nUnfilled value or value lower or equal zero means the functionality is switched off and all rows will processed.",
                        "format": "int32",
                        "nullable": true
                    },
                    "decimalDigitsConflict": {
                        "$ref": "#/components/schemas/DecimalDigitsConflict"
                    },
                    "roundingRadix": {
                        "$ref": "#/components/schemas/RoundingRadix"
                    },
                    "roundingDirection": {
                        "$ref": "#/components/schemas/RoundingDirection"
                    },
                    "stringLengthConflict": {
                        "$ref": "#/components/schemas/StringLengthConflict"
                    }
                },
                "additionalProperties": false,
                "description": "Model (contract) of parameters' item for function which imports data using \"General Import\" functionality."
            },
            "GeneralItemModelResult": {
                "required": [
                    "itemId",
                    "rowOrdinalNumber"
                ],
                "type": "object",
                "properties": {
                    "attributes": {
                        "$ref": "#/components/schemas/AttributesCollection{IAttributeResult}"
                    },
                    "staticRelations": {
                        "$ref": "#/components/schemas/RelationCollection{IForeignKeyRelationItemResult}"
                    },
                    "dynamicRelations": {
                        "$ref": "#/components/schemas/RelationCollection{RelationItemModelResult}"
                    },
                    "userDefinedAttributes": {
                        "$ref": "#/components/schemas/AttributesCollection{IUserDefinedAttributeResult}"
                    },
                    "userDefinedStaticRelations": {
                        "$ref": "#/components/schemas/RelationCollection{IForeignKeyRelationItemResult}"
                    },
                    "itemId": {
                        "type": "integer",
                        "description": "Identifier of item in a record.",
                        "format": "int32"
                    },
                    "rowOrdinalNumber": {
                        "type": "integer",
                        "description": "Row ordinal number.",
                        "format": "int32"
                    }
                },
                "additionalProperties": false,
                "description": "General contract for items which are used to retrieve items of entity, if no specific model for items is used."
            },
            "GeneralModelResultWithItems": {
                "required": [
                    "classId"
                ],
                "type": "object",
                "properties": {
                    "attributes": {
                        "$ref": "#/components/schemas/AttributesCollection{IAttributeResult}"
                    },
                    "staticRelations": {
                        "$ref": "#/components/schemas/RelationCollection{IForeignKeyRelationItemResult}"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GeneralItemModelResult"
                        },
                        "description": "Items of records. Optional.",
                        "nullable": true
                    },
                    "id": {
                        "type": "integer",
                        "description": "Identifier (PK) of a record.",
                        "format": "int32",
                        "example": 1
                    },
                    "classId": {
                        "type": "integer",
                        "description": "Identifier of the class of the entity.",
                        "format": "int32",
                        "example": 1023
                    },
                    "className": {
                        "type": "string",
                        "description": "Localized name of an entity class. Optional.",
                        "nullable": true,
                        "example": "My class name"
                    },
                    "folderId": {
                        "type": "integer",
                        "description": "Identifier of the folder.",
                        "format": "int32",
                        "example": 123
                    },
                    "folderName": {
                        "type": "string",
                        "description": "Localized name of an entity folder. Optional.",
                        "nullable": true,
                        "example": "My folder name"
                    },
                    "lastUpdatedOn": {
                        "type": "string",
                        "description": "Gets or sets an entity last update date and time.\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Gets or sets date and time when entity was created .\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "Gets entity timestamp.",
                        "nullable": true,
                        "example": "00000000000117CB"
                    },
                    "gunid": {
                        "type": "string",
                        "description": "Global record identifier within several databases.\r\nThis value is generated by database on a back-end.",
                        "nullable": true,
                        "example": "00000K00001U00000P"
                    },
                    "createdById": {
                        "type": "integer",
                        "description": "Primary key of the creator of the entity/record.",
                        "format": "int32",
                        "nullable": true,
                        "example": 69
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
                    },
                    "lastUpdatedById": {
                        "type": "integer",
                        "description": "Primary key of the last updated user of the entity",
                        "format": "int32",
                        "nullable": true,
                        "example": 69
                    },
                    "lastUpdatedBy": {
                        "$ref": "#/components/schemas/ForeignKeyRelationItemResult"
                    },
                    "dynamicRelations": {
                        "$ref": "#/components/schemas/RelationCollection{RelationItemModelResult}"
                    },
                    "userDefinedAttributes": {
                        "$ref": "#/components/schemas/AttributesCollection{IUserDefinedAttributeResult}"
                    },
                    "userDefinedStaticRelations": {
                        "$ref": "#/components/schemas/RelationCollection{IForeignKeyRelationItemResult}"
                    },
                    "reference": {
                        "type": "string",
                        "description": "Reference no. of record.",
                        "nullable": true,
                        "example": "X0000001"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of record.",
                        "nullable": true,
                        "example": "Record name"
                    }
                },
                "additionalProperties": false,
                "description": "Contact of a general model for entities which contains items."
            },
            "HttpStatusCode": {
                "enum": [
                    "continue",
                    "switchingProtocols",
                    "processing",
                    "earlyHints",
                    "ok",
                    "created",
                    "accepted",
                    "nonAuthoritativeInformation",
                    "noContent",
                    "resetContent",
                    "partialContent",
                    "multiStatus",
                    "alreadyReported",
                    "imUsed",
                    "ambiguous",
                    "moved",
                    "redirect",
                    "redirectMethod",
                    "notModified",
                    "useProxy",
                    "unused",
                    "temporaryRedirect",
                    "permanentRedirect",
                    "badRequest",
                    "unauthorized",
                    "paymentRequired",
                    "forbidden",
                    "notFound",
                    "methodNotAllowed",
                    "notAcceptable",
                    "proxyAuthenticationRequired",
                    "requestTimeout",
                    "conflict",
                    "gone",
                    "lengthRequired",
                    "preconditionFailed",
                    "requestEntityTooLarge",
                    "requestUriTooLong",
                    "unsupportedMediaType",
                    "requestedRangeNotSatisfiable",
                    "expectationFailed",
                    "misdirectedRequest",
                    "unprocessableEntity",
                    "locked",
                    "failedDependency",
                    "upgradeRequired",
                    "preconditionRequired",
                    "tooManyRequests",
                    "requestHeaderFieldsTooLarge",
                    "unavailableForLegalReasons",
                    "internalServerError",
                    "notImplemented",
                    "badGateway",
                    "serviceUnavailable",
                    "gatewayTimeout",
                    "httpVersionNotSupported",
                    "variantAlsoNegotiates",
                    "insufficientStorage",
                    "loopDetected",
                    "notExtended",
                    "networkAuthenticationRequired"
                ],
                "type": "string"
            },
            "IAttributeResult": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of a column an attribute is mapped to.",
                        "nullable": true,
                        "readOnly": true
                    },
                    "value": {
                        "description": "Value of the attribute.",
                        "nullable": true
                    },
                    "symbolicName": {
                        "type": "string",
                        "description": "Symbolic of attribute.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Interface which describes a attribute in results of requests."
            },
            "IForeignKeyRelationItemResult": {
                "type": "object",
                "properties": {
                    "record": {
                        "$ref": "#/components/schemas/RelatedRecordModelResult"
                    },
                    "relationId": {
                        "type": "integer",
                        "description": "The unique identifier of a relation.",
                        "format": "int32"
                    },
                    "side": {
                        "$ref": "#/components/schemas/RelationSide"
                    },
                    "symbolicName": {
                        "type": "string",
                        "description": "The symbolic name of a relation (optional).",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Interface for a contract to hold information about record in a relation which is a foreign key."
            },
            "IFunctionResult": {
                "type": "object",
                "properties": {
                    "resultedRecords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IRecordId"
                        },
                        "description": "Records which were processed by the function.",
                        "nullable": true
                    },
                    "log": {
                        "$ref": "#/components/schemas/FunctionLog"
                    }
                },
                "additionalProperties": false,
                "description": "Interface for a result contract of functions."
            },
            "IRecordId": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "classId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "isEmpty": {
                        "type": "boolean",
                        "readOnly": true
                    }
                },
                "additionalProperties": false
            },
            "IUserDefinedAttributeResult": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of a column an attribute is mapped to.",
                        "nullable": true,
                        "readOnly": true
                    },
                    "value": {
                        "description": "Value of the attribute.",
                        "nullable": true
                    },
                    "symbolicName": {
                        "type": "string",
                        "description": "Symbolic of attribute.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Interface which describes a user defined attribute in results of requests."
            },
            "InvoicesIssuedGetResponse": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InvoicesIssuedGetResponseElement"
                        },
                        "description": "CZ: Kolekce sazeb dph.",
                        "nullable": true
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "CZ: Celkový počet záznamů.",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "description": "CZ: Počet záznamů.",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "CZ: Počet stránek.",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "CZ: Stránka",
                        "format": "int32"
                    }
                },
                "additionalProperties": false,
                "description": "API GET Customer/Pantheon/FakturaVydana RESPONSE"
            },
            "InvoicesIssuedGetResponseElement": {
                "type": "object",
                "properties": {
                    "fakturaId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "fakturaIdEx": {
                        "type": "string",
                        "nullable": true
                    },
                    "stav": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "stavUhrazenosti": {
                        "type": "string",
                        "nullable": true
                    },
                    "variabilniSymbol": {
                        "type": "string",
                        "nullable": true
                    },
                    "cisloJednaci": {
                        "type": "string",
                        "nullable": true
                    },
                    "cenaCelkem": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "datumDuzp": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "datumPorizeni": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "datumSplatnosti": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "konstantniSymbol": {
                        "type": "string",
                        "nullable": true
                    },
                    "organizaceOdberatel": {
                        "$ref": "#/components/schemas/OrganizaceGetResponseElement"
                    },
                    "organizacePrijemce": {
                        "$ref": "#/components/schemas/OrganizaceGetResponseElement"
                    },
                    "poznamka": {
                        "type": "string",
                        "nullable": true
                    },
                    "specifickySymbol": {
                        "type": "string",
                        "nullable": true
                    },
                    "kontaceHlavicka": {
                        "$ref": "#/components/schemas/PvdAllocationGetResponseElement"
                    },
                    "polozky": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Polozka"
                        },
                        "nullable": true
                    },
                    "zbyvaUhradit": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "InvoicesIssuedPostPutRequest": {
                "required": [
                    "organizace",
                    "organizace2",
                    "specifickySymbol",
                    "variabilniSymbol"
                ],
                "type": "object",
                "properties": {
                    "cisloJednaci": {
                        "type": "string",
                        "nullable": true
                    },
                    "cisloPoradace": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "datumDuzp": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "datumPorizeni": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "datumSplatnosti": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "fakturaIdEx": {
                        "type": "string",
                        "nullable": true
                    },
                    "konstantniSymbol": {
                        "type": "string",
                        "nullable": true
                    },
                    "organizace": {
                        "$ref": "#/components/schemas/OrganizacePostPutRequest"
                    },
                    "organizace2": {
                        "$ref": "#/components/schemas/OrganizacePostPutRequest"
                    },
                    "poznamka": {
                        "type": "string",
                        "nullable": true
                    },
                    "specifickySymbol": {
                        "type": "string"
                    },
                    "typUhrady": {
                        "type": "string",
                        "nullable": true
                    },
                    "variabilniSymbol": {
                        "type": "string"
                    },
                    "kontaceId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "polozky": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Polozka"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "InvoicesIssuedPostPutResponse": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "CZ: Chybové hlášky",
                        "nullable": true
                    },
                    "fakturaId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "fakturaIdEx": {
                        "type": "string",
                        "nullable": true
                    },
                    "stav": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "stavUhrazenosti": {
                        "type": "string",
                        "nullable": true
                    },
                    "variabilniSymbol": {
                        "type": "string",
                        "nullable": true
                    },
                    "cisloJednaci": {
                        "type": "string",
                        "nullable": true
                    },
                    "cenaCelkem": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "datumDuzp": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "datumPorizeni": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "datumSplatnosti": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "konstantniSymbol": {
                        "type": "string",
                        "nullable": true
                    },
                    "organizaceOdberatel": {
                        "$ref": "#/components/schemas/OrganizaceGetResponseElement"
                    },
                    "organizacePrijemce": {
                        "$ref": "#/components/schemas/OrganizaceGetResponseElement"
                    },
                    "poznamka": {
                        "type": "string",
                        "nullable": true
                    },
                    "specifickySymbol": {
                        "type": "string",
                        "nullable": true
                    },
                    "kontaceHlavicka": {
                        "$ref": "#/components/schemas/PvdAllocationGetResponseElement"
                    },
                    "polozky": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Polozka"
                        },
                        "nullable": true
                    },
                    "zbyvaUhradit": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "KeyValuePair{String_StringValues}": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "nullable": true
                    },
                    "value": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "additionalProperties": false
            },
            "ManagedDocumentItemResult": {
                "type": "object",
                "properties": {
                    "state": {
                        "type": "string",
                        "description": "State of document",
                        "nullable": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of document.",
                        "nullable": true
                    },
                    "fileName": {
                        "type": "string",
                        "description": "Physical name of file.",
                        "nullable": true
                    },
                    "effectiveDate": {
                        "type": "string",
                        "description": "Effective date of document.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "approved": {
                        "type": "boolean",
                        "description": "Is document approved?",
                        "nullable": true
                    },
                    "approvalDate": {
                        "type": "string",
                        "description": "Approval date of document.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "validFrom": {
                        "type": "string",
                        "description": "Document is valid from....",
                        "format": "date-time",
                        "nullable": true
                    },
                    "validTo": {
                        "type": "string",
                        "description": "Document is valid to....",
                        "format": "date-time",
                        "nullable": true
                    },
                    "supplements": {
                        "$ref": "#/components/schemas/ManagedDocumentSupplementsResult"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Document's Id.",
                        "format": "int32"
                    },
                    "folderId": {
                        "type": "integer",
                        "description": "Document's folder Id.",
                        "format": "int32"
                    },
                    "reference": {
                        "type": "string",
                        "description": "A reference code of document.",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of document.",
                        "nullable": true
                    },
                    "fileContent": {
                        "type": "string",
                        "description": "Content (Base64 format).",
                        "nullable": true
                    },
                    "fileContentError": {
                        "type": "string",
                        "description": "Error message while content of file was downloaded. Null means no error occurred.",
                        "nullable": true
                    },
                    "fileContentLength": {
                        "type": "integer",
                        "description": "The length in bytes.",
                        "format": "int64",
                        "nullable": true
                    },
                    "timestamp": {
                        "type": "integer",
                        "description": "Document's timestamp as a number.",
                        "format": "int64",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Information about a response item of managed document (Managed Documents Definition of messages)."
            },
            "ManagedDocumentSupplementItemResult": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Document's Id.",
                        "format": "int32"
                    },
                    "reference": {
                        "type": "string",
                        "description": "A reference code of document.",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of document.",
                        "nullable": true
                    },
                    "fileName": {
                        "type": "string",
                        "description": "File name.",
                        "nullable": true
                    },
                    "state": {
                        "type": "string",
                        "description": "State of document",
                        "nullable": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of document.",
                        "nullable": true
                    },
                    "validFrom": {
                        "type": "string",
                        "description": "Document is valid from....",
                        "format": "date-time",
                        "nullable": true
                    },
                    "validTo": {
                        "type": "string",
                        "description": "Document is valid to....",
                        "format": "date-time",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Information about a response item of managed document supplement."
            },
            "ManagedDocumentSupplementsResult": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ManagedDocumentSupplementItemResult"
                        },
                        "description": "Collection of supplements.",
                        "nullable": true
                    },
                    "count": {
                        "type": "integer",
                        "description": "Count of supplements.",
                        "format": "int32",
                        "readOnly": true
                    }
                },
                "additionalProperties": false,
                "description": "Response for getting of document supplements."
            },
            "ManagedDocumentsResult": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Count of ASOL.WebAPI.Core.DataTransfers.Contracts.Documents.ManagedDocumentsResult.Documents.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "documents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ManagedDocumentItemResult"
                        },
                        "description": "Collection of external documents.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Response for GET operation for managed documents (Managed Documents Definition of messages)."
            },
            "Microsoft.AspNetCore.Mvc.ProblemDetails": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "nullable": true
                    },
                    "title": {
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "detail": {
                        "type": "string",
                        "nullable": true
                    },
                    "instance": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": {}
            },
            "NameValueParam": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string",
                        "description": "Name of parameter."
                    },
                    "value": {
                        "description": "Value of parameter. \r\nUse appropriate format of value to recognize a type of value.\r\nE.g. \"2021-10-06T08:54:51.827Z\" for date and time, 123 for integer, 1.23 for decimal, \"ABC\" for string ... \r\nWhen a parameter is a relation, value must contain a composed value like: {\"id\": 58741,\"classId\": 1023} .",
                        "nullable": true,
                        "example": null
                    },
                    "skip": {
                        "type": "boolean",
                        "description": "If true, parameter is skipped.",
                        "example": false
                    }
                },
                "additionalProperties": false,
                "description": "Name and value pair of parameter."
            },
            "OrganizaceGetResponse": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrganizaceGetResponseElement"
                        },
                        "description": "CZ: Kolekce organizací.",
                        "nullable": true
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "CZ: Celkový počet záznamů.",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "description": "CZ: Počet záznamů.",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "CZ: Počet stránek.",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "CZ: Stránka",
                        "format": "int32"
                    }
                },
                "additionalProperties": false,
                "description": "API GET Customer/Pantheon/Organizace RESPONSE\r\nAPI GET Customer/Pantheon/Organizace/{id} RESPONSE"
            },
            "OrganizaceGetResponseElement": {
                "type": "object",
                "properties": {
                    "cisloOrganizace": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "nazevZkraceny": {
                        "type": "string",
                        "nullable": true
                    },
                    "nazevDoplnujici": {
                        "type": "string",
                        "nullable": true
                    },
                    "jmeno": {
                        "type": "string",
                        "nullable": true
                    },
                    "prijmeni": {
                        "type": "string",
                        "nullable": true
                    },
                    "ico": {
                        "type": "string",
                        "nullable": true
                    },
                    "nazevOrganizace": {
                        "type": "string",
                        "nullable": true
                    },
                    "dic": {
                        "type": "string",
                        "nullable": true
                    },
                    "pravniForma": {
                        "type": "string",
                        "nullable": true
                    },
                    "eMail": {
                        "type": "string",
                        "nullable": true
                    },
                    "poznamka": {
                        "type": "string",
                        "nullable": true
                    },
                    "datumNarozeni": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "datumUmrti": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "rodneCislo": {
                        "type": "string",
                        "nullable": true
                    },
                    "organizaceIdEx": {
                        "type": "string",
                        "nullable": true
                    },
                    "platceDph": {
                        "type": "string",
                        "nullable": true
                    },
                    "idPartnera": {
                        "type": "string",
                        "nullable": true
                    },
                    "stav": {
                        "type": "string",
                        "nullable": true
                    },
                    "zemeId": {
                        "type": "string",
                        "nullable": true
                    },
                    "adresy": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Adresa"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "OrganizacePostPutRequest": {
                "type": "object",
                "properties": {
                    "cisloOrganizace": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "nazevZkraceny": {
                        "type": "string",
                        "nullable": true
                    },
                    "nazevDoplnujici": {
                        "type": "string",
                        "nullable": true
                    },
                    "jmeno": {
                        "type": "string",
                        "nullable": true
                    },
                    "prijmeni": {
                        "type": "string",
                        "nullable": true
                    },
                    "ico": {
                        "type": "string",
                        "nullable": true
                    },
                    "nazevOrganizace": {
                        "type": "string",
                        "nullable": true
                    },
                    "dic": {
                        "type": "string",
                        "nullable": true
                    },
                    "pravniForma": {
                        "type": "string",
                        "nullable": true
                    },
                    "eMail": {
                        "type": "string",
                        "nullable": true
                    },
                    "poznamka": {
                        "type": "string",
                        "nullable": true
                    },
                    "datumNarozeni": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "datumUmrti": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "rodneCislo": {
                        "type": "string",
                        "nullable": true
                    },
                    "organizaceIdEx": {
                        "type": "string",
                        "nullable": true
                    },
                    "platceDph": {
                        "type": "string",
                        "nullable": true
                    },
                    "idPartnera": {
                        "type": "string",
                        "nullable": true
                    },
                    "stav": {
                        "type": "string",
                        "nullable": true
                    },
                    "zemeId": {
                        "type": "string",
                        "nullable": true
                    },
                    "adresy": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Adresa"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "API POST|PUT Customer/Pantheon/Organizace REQUEST"
            },
            "OrganizacePostPutResponse": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "CZ: Chybové hlášky",
                        "nullable": true
                    },
                    "cisloOrganizace": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "nazevZkraceny": {
                        "type": "string",
                        "nullable": true
                    },
                    "nazevDoplnujici": {
                        "type": "string",
                        "nullable": true
                    },
                    "jmeno": {
                        "type": "string",
                        "nullable": true
                    },
                    "prijmeni": {
                        "type": "string",
                        "nullable": true
                    },
                    "ico": {
                        "type": "string",
                        "nullable": true
                    },
                    "nazevOrganizace": {
                        "type": "string",
                        "nullable": true
                    },
                    "dic": {
                        "type": "string",
                        "nullable": true
                    },
                    "pravniForma": {
                        "type": "string",
                        "nullable": true
                    },
                    "eMail": {
                        "type": "string",
                        "nullable": true
                    },
                    "poznamka": {
                        "type": "string",
                        "nullable": true
                    },
                    "datumNarozeni": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "datumUmrti": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "rodneCislo": {
                        "type": "string",
                        "nullable": true
                    },
                    "organizaceIdEx": {
                        "type": "string",
                        "nullable": true
                    },
                    "platceDph": {
                        "type": "string",
                        "nullable": true
                    },
                    "idPartnera": {
                        "type": "string",
                        "nullable": true
                    },
                    "stav": {
                        "type": "string",
                        "nullable": true
                    },
                    "zemeId": {
                        "type": "string",
                        "nullable": true
                    },
                    "adresy": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Adresa"
                        },
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "API POST|PUT Customer/Pantheon/Organizace RESPONSE"
            },
            "OverpaymentGetResponse": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OverpaymentGetResponseElement"
                        },
                        "description": "CZ: Kolekce organizací.",
                        "nullable": true
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "CZ: Celkový počet záznamů.",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "description": "CZ: Počet záznamů.",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "CZ: Počet stránek.",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "CZ: Stránka",
                        "format": "int32"
                    }
                },
                "additionalProperties": false,
                "description": "API GET Customer/Pantheon/Preplatek RESPONSE"
            },
            "OverpaymentGetResponseElement": {
                "type": "object",
                "properties": {
                    "preplatekId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "preplatekIdEx": {
                        "type": "string",
                        "nullable": true
                    },
                    "platceId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "platceIdEx": {
                        "type": "string",
                        "nullable": true
                    },
                    "dobropis": {
                        "$ref": "#/components/schemas/CreditNoteGetResponseElement"
                    }
                },
                "additionalProperties": false
            },
            "OverpaymentPostPutRequest": {
                "type": "object",
                "properties": {
                    "datumSplatnosti": {
                        "type": "string",
                        "description": "CZ: Datum splatnosti",
                        "format": "date-time",
                        "nullable": true
                    },
                    "preplatekIdEx": {
                        "type": "string",
                        "description": "CZ: ID dokladu externí",
                        "nullable": true
                    },
                    "platceId": {
                        "type": "integer",
                        "description": "CZ: ID plátce",
                        "format": "int32",
                        "nullable": true
                    },
                    "platceIdEx": {
                        "type": "string",
                        "description": "CZ: ID plátce externí",
                        "nullable": true
                    },
                    "dobropis": {
                        "$ref": "#/components/schemas/CreditNotePostPutRequest"
                    }
                },
                "additionalProperties": false,
                "description": "API POST|PUT Customer/Pantheon/Preplatek REQUEST"
            },
            "OverpaymentPostPutResponse": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "CZ: Chybové hlášky",
                        "nullable": true
                    },
                    "preplatekId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "preplatekIdEx": {
                        "type": "string",
                        "nullable": true
                    },
                    "platceId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "platceIdEx": {
                        "type": "string",
                        "nullable": true
                    },
                    "dobropis": {
                        "$ref": "#/components/schemas/CreditNoteGetResponseElement"
                    }
                },
                "additionalProperties": false,
                "description": "API POST|PUT Customer/Pantheon/Preplatek RESPONSE"
            },
            "PayerGetResponse": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PayerGetResponseElement"
                        },
                        "description": "CZ: Kolekce plátců.",
                        "nullable": true
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "CZ: Celkový počet záznamů.",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "description": "CZ: Počet záznamů.",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "CZ: Počet stránek.",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "CZ: Stránka",
                        "format": "int32"
                    }
                },
                "additionalProperties": false,
                "description": "API GET Customer/Pantheon/Platce RESPONSE\r\nAPI GET Customer/Pantheon/Platce/{id} RESPONSE"
            },
            "PayerGetResponseElement": {
                "type": "object",
                "properties": {
                    "celkemZaPredpisy": {
                        "type": "number",
                        "description": "CZ: Celkem za předpisy",
                        "format": "double",
                        "nullable": true
                    },
                    "kodKnihy": {
                        "type": "integer",
                        "description": "CZ: Kód knihy",
                        "format": "int32",
                        "nullable": true
                    },
                    "platceId": {
                        "type": "integer",
                        "description": "CZ: Interní číslo",
                        "format": "int32",
                        "nullable": true
                    },
                    "platceIdEx": {
                        "type": "string",
                        "description": "CZ: Interní číslo",
                        "nullable": true
                    },
                    "platnostDo": {
                        "type": "string",
                        "description": "CZ: Platnost do",
                        "format": "date-time",
                        "nullable": true
                    },
                    "platnostOd": {
                        "type": "string",
                        "description": "CZ: Platnost od",
                        "format": "date-time",
                        "nullable": true
                    },
                    "poznamka": {
                        "type": "string",
                        "description": "CZ: Poznámka",
                        "nullable": true
                    },
                    "specifickySymbol": {
                        "type": "number",
                        "description": "CZ: Specifický symbol",
                        "format": "double",
                        "nullable": true
                    },
                    "spojovaciCislo": {
                        "type": "number",
                        "description": "CZ: Spojovací číslo",
                        "format": "double",
                        "nullable": true
                    },
                    "variabilniSymbol": {
                        "type": "string",
                        "description": "CZ: Variabilní symbol",
                        "nullable": true
                    },
                    "zbyvaZaPredpisy": {
                        "type": "number",
                        "description": "CZ: Zbývá za předpisy",
                        "format": "double",
                        "nullable": true
                    },
                    "organizace": {
                        "$ref": "#/components/schemas/OrganizaceGetResponseElement"
                    }
                },
                "additionalProperties": false
            },
            "PayerInvalidateGetRequest": {
                "type": "object",
                "properties": {
                    "DatumUkonceni": {
                        "type": "string",
                        "description": "CZ: Datum ukončení",
                        "nullable": true,
                        "example": "2021-12-31"
                    },
                    "Poznamka": {
                        "type": "string",
                        "description": "CZ: Poznámka",
                        "nullable": true,
                        "example": "Poznámka"
                    }
                },
                "additionalProperties": false
            },
            "PayerPostPutRequest": {
                "type": "object",
                "properties": {
                    "KodKnihy": {
                        "type": "integer",
                        "description": "CZ: Kód knihy poplatku",
                        "format": "int32",
                        "nullable": true,
                        "example": 777
                    },
                    "PlatceId": {
                        "type": "integer",
                        "description": "CZ: Interní identifikátor Plátce (parametr má přednost před ostatními parametry)",
                        "format": "int32",
                        "nullable": true,
                        "example": 781254
                    },
                    "PlatceIdEx": {
                        "type": "string",
                        "description": "CZ: Externí identifikátor Plátce (parametr má přednost před ostatními parametry)",
                        "nullable": true,
                        "example": "PIX_0001"
                    },
                    "PlatnostDo": {
                        "type": "string",
                        "description": "CZ: Platnost do",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-12-31"
                    },
                    "PlatnostOd": {
                        "type": "string",
                        "description": "CZ: Platnost od",
                        "format": "date-time",
                        "nullable": true,
                        "example": "2021-01-01"
                    },
                    "Poznamka": {
                        "type": "string",
                        "description": "CZ: Poznámka",
                        "nullable": true,
                        "example": "poznámka"
                    },
                    "SpojovaciCislo": {
                        "type": "number",
                        "description": "CZ: Spojovací číslo",
                        "format": "double",
                        "nullable": true,
                        "example": 1234567890
                    },
                    "SpecifickySymbol": {
                        "type": "number",
                        "description": "CZ: Specifický symbol",
                        "format": "double",
                        "nullable": true,
                        "example": 1234567890
                    },
                    "VariabilniSymbol": {
                        "type": "string",
                        "description": "CZ: Variabilní symbol",
                        "nullable": true,
                        "example": "1234567890"
                    },
                    "Organizace": {
                        "$ref": "#/components/schemas/OrganizacePostPutRequest"
                    }
                },
                "additionalProperties": false,
                "description": "API POST|PUT Customer/Pantheon/Platce REQUEST"
            },
            "PayerPostPutResponse": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "CZ: Chybové hlášky",
                        "nullable": true
                    },
                    "celkemZaPredpisy": {
                        "type": "number",
                        "description": "CZ: Celkem za předpisy",
                        "format": "double",
                        "nullable": true
                    },
                    "kodKnihy": {
                        "type": "integer",
                        "description": "CZ: Kód knihy",
                        "format": "int32",
                        "nullable": true
                    },
                    "platceId": {
                        "type": "integer",
                        "description": "CZ: Interní číslo",
                        "format": "int32",
                        "nullable": true
                    },
                    "platceIdEx": {
                        "type": "string",
                        "description": "CZ: Interní číslo",
                        "nullable": true
                    },
                    "platnostDo": {
                        "type": "string",
                        "description": "CZ: Platnost do",
                        "format": "date-time",
                        "nullable": true
                    },
                    "platnostOd": {
                        "type": "string",
                        "description": "CZ: Platnost od",
                        "format": "date-time",
                        "nullable": true
                    },
                    "poznamka": {
                        "type": "string",
                        "description": "CZ: Poznámka",
                        "nullable": true
                    },
                    "specifickySymbol": {
                        "type": "number",
                        "description": "CZ: Specifický symbol",
                        "format": "double",
                        "nullable": true
                    },
                    "spojovaciCislo": {
                        "type": "number",
                        "description": "CZ: Spojovací číslo",
                        "format": "double",
                        "nullable": true
                    },
                    "variabilniSymbol": {
                        "type": "string",
                        "description": "CZ: Variabilní symbol",
                        "nullable": true
                    },
                    "zbyvaZaPredpisy": {
                        "type": "number",
                        "description": "CZ: Zbývá za předpisy",
                        "format": "double",
                        "nullable": true
                    },
                    "organizace": {
                        "$ref": "#/components/schemas/OrganizaceGetResponseElement"
                    }
                },
                "additionalProperties": false,
                "description": "API POST|PUT Customer/Pantheon/Platce RESPONSE"
            },
            "PayerprescriptionGetResponse": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PayerprescriptionGetResponseElement"
                        },
                        "description": "CZ: Kolekce organizací.",
                        "nullable": true
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "CZ: Celkový počet záznamů.",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "description": "CZ: Počet záznamů.",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "CZ: Počet stránek.",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "CZ: Stránka",
                        "format": "int32"
                    }
                },
                "additionalProperties": false,
                "description": "API GET Customer/Pantheon/Predpis RESPONSE"
            },
            "PayerprescriptionGetResponseElement": {
                "type": "object",
                "properties": {
                    "predpisId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "predpisIdEx": {
                        "type": "string",
                        "nullable": true
                    },
                    "platceId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "platceIdEx": {
                        "type": "string",
                        "nullable": true
                    },
                    "faktura": {
                        "$ref": "#/components/schemas/InvoicesIssuedGetResponseElement"
                    },
                    "cisloUctu": {
                        "type": "string",
                        "nullable": true
                    },
                    "kodBanky": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "PayerprescriptionPostPutRequest": {
                "type": "object",
                "properties": {
                    "datumSplatnosti": {
                        "type": "string",
                        "description": "CZ: Datum splatnosti",
                        "format": "date-time",
                        "nullable": true
                    },
                    "predpisIdEx": {
                        "type": "string",
                        "description": "CZ: ID dokladu externí",
                        "nullable": true
                    },
                    "platceId": {
                        "type": "integer",
                        "description": "CZ: ID plátce",
                        "format": "int32",
                        "nullable": true
                    },
                    "platceIdEx": {
                        "type": "string",
                        "description": "CZ: ID plátce externí",
                        "nullable": true
                    },
                    "faktura": {
                        "$ref": "#/components/schemas/InvoicesIssuedPostPutRequest"
                    }
                },
                "additionalProperties": false,
                "description": "API POST|PUT Customer/Pantheon/Predpis REQUEST"
            },
            "PayerprescriptionPostPutResponse": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "CZ: Chybové hlášky",
                        "nullable": true
                    },
                    "predpisId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "predpisIdEx": {
                        "type": "string",
                        "nullable": true
                    },
                    "platceId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "platceIdEx": {
                        "type": "string",
                        "nullable": true
                    },
                    "faktura": {
                        "$ref": "#/components/schemas/InvoicesIssuedGetResponseElement"
                    },
                    "cisloUctu": {
                        "type": "string",
                        "nullable": true
                    },
                    "kodBanky": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "API POST|PUT Customer/Pantheon/Predpis RESPONSE"
            },
            "PaymentGetResponse": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaymentGetResponseElement"
                        },
                        "description": "CZ: Kolekce organizací.",
                        "nullable": true
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "CZ: Celkový počet záznamů.",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "description": "CZ: Počet záznamů.",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "CZ: Počet stránek.",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "CZ: Stránka",
                        "format": "int32"
                    }
                },
                "additionalProperties": false,
                "description": "API GET Customer/Pantheon/Uhrada RESPONSE"
            },
            "PaymentGetResponseElement": {
                "type": "object",
                "properties": {
                    "castka": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "datumUhrady": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "datumSmazaniUhrady": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "hradiciDokladId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "hradiciDokladCislo": {
                        "type": "string",
                        "nullable": true
                    },
                    "hrazenyDokladId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "hrazenyDokladIdEx": {
                        "type": "string",
                        "nullable": true
                    },
                    "typUhrady": {
                        "type": "string",
                        "nullable": true
                    },
                    "uhradaId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "PaymentTypeGetResponse": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaymentTypeGetResponseElement"
                        },
                        "description": "CZ: Kolekce typů úhrad.",
                        "nullable": true
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "CZ: Celkový počet záznamů.",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "description": "CZ: Počet záznamů.",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "CZ: Počet stránek.",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "CZ: Stránka",
                        "format": "int32"
                    }
                },
                "additionalProperties": false,
                "description": "API GET Customer/Pantheon/CiselnikTypUhrady RESPONSE"
            },
            "PaymentTypeGetResponseElement": {
                "type": "object",
                "properties": {
                    "kod": {
                        "type": "string",
                        "nullable": true
                    },
                    "popis": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "Polozka": {
                "required": [
                    "nazev"
                ],
                "type": "object",
                "properties": {
                    "cena_celkem": {
                        "type": "number",
                        "description": "Atribut zveřejněn pouze pro čtení dat\r\nFakturaVydanaDto, DobropisDto",
                        "format": "double",
                        "nullable": true
                    },
                    "cena_jedn": {
                        "type": "number",
                        "description": "není třeba dopňovat\r\nplatí, že\r\npocet x cen_jedn = cena_zaklad",
                        "format": "double",
                        "nullable": true
                    },
                    "cena_zaklad": {
                        "type": "number",
                        "description": "při doplnění této hodnoty se aplikačně doplní cena_jedn + pocet\r\ndefault\r\npocet =1\r\ncena_jedn=cena_zaklad",
                        "format": "double",
                        "nullable": true
                    },
                    "dph_celkem": {
                        "type": "string",
                        "nullable": true
                    },
                    "kod_dph": {
                        "type": "string",
                        "description": "Kód DPH obsahuje referenci na třídu 48 Sazby DPH....kod repretentuje sazbu DPH",
                        "nullable": true
                    },
                    "nazev": {
                        "type": "string"
                    },
                    "pocet": {
                        "type": "number",
                        "description": "vychozí hodnota = 1\r\nnení třeba dopňovat\r\nplatí, že\r\npocet x cen_jedn = cena_zaklad",
                        "format": "double",
                        "nullable": true
                    },
                    "sazba_dph": {
                        "type": "integer",
                        "description": "Atribut zveřejněn pouze pro čtení dat\r\nFakturaVydanaDto, DobropisDto",
                        "format": "int32",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ProblemDetails": {
                "type": "object",
                "properties": {
                    "errorNumber": {
                        "type": "integer",
                        "description": "Internal error number. Optional.",
                        "format": "int64",
                        "nullable": true
                    },
                    "type": {
                        "type": "string",
                        "nullable": true
                    },
                    "title": {
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "detail": {
                        "type": "string",
                        "nullable": true
                    },
                    "instance": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": {},
                "description": "A machine-readable format for specifying errors in HTTP API responses based on  https://tools.ietf.org/html/rfc7807"
            },
            "PvdAllocationGetResponse": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PvdAllocationGetResponseElement"
                        },
                        "description": "CZ: Kolekce sazeb dph.",
                        "nullable": true
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "CZ: Celkový počet záznamů.",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "description": "CZ: Počet záznamů.",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "CZ: Počet stránek.",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "CZ: Stránka",
                        "format": "int32"
                    }
                },
                "additionalProperties": false,
                "description": "API GET Customer/Pantheon/KontacePrvodokladu RESPONSE"
            },
            "PvdAllocationGetResponseElement": {
                "type": "object",
                "properties": {
                    "kontaceId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "interniCislo": {
                        "type": "string",
                        "nullable": true
                    },
                    "kontaceNazev": {
                        "type": "string",
                        "nullable": true
                    },
                    "sbornikNazev": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "ReceivablesLedgerGetResponse": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReceivablesLedgerGetResponseElement"
                        },
                        "description": "CZ: Kolekce organizací.",
                        "nullable": true
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "CZ: Celkový počet záznamů.",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "description": "CZ: Počet záznamů.",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "CZ: Počet stránek.",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "CZ: Stránka",
                        "format": "int32"
                    }
                },
                "additionalProperties": false,
                "description": "API GET Customer/Pantheon/Kniha RESPONSE"
            },
            "ReceivablesLedgerGetResponseElement": {
                "type": "object",
                "properties": {
                    "nazev": {
                        "type": "string",
                        "description": "CZ: Název knihy",
                        "nullable": true
                    },
                    "kod": {
                        "type": "integer",
                        "description": "CZ: Kód knihy",
                        "format": "int32",
                        "nullable": true
                    },
                    "knihaId": {
                        "type": "integer",
                        "description": "CZ: Identifikátor knihy",
                        "format": "int32",
                        "nullable": true
                    },
                    "platnostOd": {
                        "type": "string",
                        "description": "CZ: Datum platnosti od",
                        "nullable": true,
                        "example": "2001-02-29"
                    },
                    "platnostDo": {
                        "type": "string",
                        "description": "CZ: Datum platnosti do",
                        "nullable": true,
                        "example": "2002-02-29"
                    },
                    "evidTyp": {
                        "type": "string",
                        "description": "CZ: Typ evidence (?)",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "RecordDataRowType": {
                "enum": [
                    "header",
                    "item"
                ],
                "type": "string",
                "description": "Type of row."
            },
            "RecordId": {
                "type": "object",
                "properties": {
                    "id": {
                        "maximum": 2147483647,
                        "minimum": 0,
                        "type": "integer",
                        "description": "Get valid record number or Record.Empty constant.",
                        "format": "int32"
                    },
                    "classId": {
                        "maximum": 2147483647,
                        "minimum": 0,
                        "type": "integer",
                        "description": "Get valid class number or 0.",
                        "format": "int32"
                    }
                },
                "additionalProperties": false,
                "description": "Record identifier for a unique record identification."
            },
            "RecordPartScope": {
                "enum": [
                    "none",
                    "header",
                    "items",
                    "all"
                ],
                "type": "string",
                "description": "Defines a part of a record"
            },
            "RecordPeriodItemResult": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Reference code of period (e.g. 2022)",
                        "nullable": true,
                        "example": "2022"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of period (e.g. Accounting period)",
                        "nullable": true,
                        "example": "Accounting period"
                    },
                    "id": {
                        "type": "string",
                        "description": "Value of period in HEX format '0x00AA...'",
                        "nullable": true,
                        "example": "0x0000000080000000000000000000000000000000000000000000000000000000"
                    },
                    "start": {
                        "type": "string",
                        "description": "Beginning of a period. \r\nOptional. Some kinds of periods does not define this property.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "end": {
                        "type": "string",
                        "description": "End of a period.\r\nOptional. Some kinds of periods does not define this property.",
                        "format": "date-time",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Information about a period."
            },
            "RecordPeriodKind": {
                "enum": [
                    "Calendar",
                    "Accounting",
                    "Custom",
                    "All"
                ],
                "type": "string",
                "description": "Kind of period to get."
            },
            "RecordPeriodRange": {
                "enum": [
                    "Current",
                    "Defined",
                    "All"
                ],
                "type": "string",
                "description": "Range of periods to get."
            },
            "RecordPeriodResponse": {
                "type": "object",
                "properties": {
                    "periods": {
                        "$ref": "#/components/schemas/RecordPeriodsResult"
                    },
                    "currentPeriods": {
                        "$ref": "#/components/schemas/CurrentRecordPeriodResult"
                    }
                },
                "additionalProperties": false,
                "description": "Contract that contains information about periods."
            },
            "RecordPeriodsResult": {
                "type": "object",
                "properties": {
                    "calendar": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RecordPeriodItemResult"
                        },
                        "description": "Collection of defined calendar periods.",
                        "nullable": true
                    },
                    "accounting": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RecordPeriodItemResult"
                        },
                        "description": "Collection of defined accounting periods.",
                        "nullable": true
                    },
                    "custom": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CustomRecordPeriodItemResult"
                        },
                        "description": "Collection of defined custom periods.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Defined periods."
            },
            "RelatedRecordModelResult": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "maximum": 2147483647,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Identifier (PK) of an entity/record.",
                        "format": "int32"
                    },
                    "classId": {
                        "type": "integer",
                        "description": "Identifier of an entity class.",
                        "format": "int32"
                    },
                    "className": {
                        "type": "string",
                        "description": "Localized name of an entity class. Optional.",
                        "nullable": true
                    },
                    "folderId": {
                        "type": "integer",
                        "description": "Identifier of an entity folder.",
                        "format": "int32"
                    },
                    "folderName": {
                        "type": "string",
                        "description": "Localized name of an entity folder. Optional.",
                        "nullable": true
                    },
                    "gunid": {
                        "type": "string",
                        "description": "Global record identifier within several databases.\r\nThis value is generated by database on a back-end.",
                        "nullable": true
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Gets or sets date and time when entity was created .\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "lastUpdatedOn": {
                        "type": "string",
                        "description": "Gets or sets an entity last update date and time.\r\nValue is generated by database on a back-end.\r\nWarning: Some entities does not define this property.",
                        "format": "date-time",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of an entity record.",
                        "nullable": true
                    },
                    "reference": {
                        "type": "string",
                        "description": "Reference no. of an entity record.",
                        "nullable": true
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "Gets record timestamp.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "A contract to hold data of a retrieved related entity/record. Invoice, Customer etc. \r\nIt does not contain all data of entity/record. Only the significant ones."
            },
            "RelationCollection{IForeignKeyRelationItemResult}": {
                "type": "object",
                "properties": {
                    "relationItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IForeignKeyRelationItemResult"
                        },
                        "description": "Collection of related entities/records.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Object which contains a collection of related entities/records."
            },
            "RelationCollection{RelationItemModelResult}": {
                "type": "object",
                "properties": {
                    "relationItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RelationItemModelResult"
                        },
                        "description": "Collection of related entities/records.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Object which contains a collection of related entities/records."
            },
            "RelationItemModelResult": {
                "required": [
                    "relationId",
                    "side"
                ],
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RelatedRecordModelResult"
                        },
                        "description": "Information about an related entity/record of the relation.\r\nIf ASOL.Nephrite.WebAPI.Contracts.RelationItemModelBase.Side is ASOL.Nephrite.WebAPI.Contracts.RelationSide.Left, this is a TO ROLE record, if  ASOL.Nephrite.WebAPI.Contracts.RelationItemModelBase.Side is  ASOL.Nephrite.WebAPI.Contracts.RelationSide.Right, this is a FROM ROLE record.",
                        "nullable": true
                    },
                    "side": {
                        "$ref": "#/components/schemas/RelationSide"
                    },
                    "relationId": {
                        "maximum": 2147483647,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Gets or sets unique relation identifier.\r\nCZ: Vrací nebo nastavuje číslo vztahu.",
                        "format": "int32"
                    },
                    "symbolicName": {
                        "type": "string",
                        "description": "Symbolic name of relation.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "A contract to hold information about records in relation."
            },
            "RelationSide": {
                "enum": [
                    "left",
                    "right"
                ],
                "type": "string",
                "description": "Side of relations (ORIENTATION), primarily for dynamic relations.\r\n(For static relation is used ASOL.Nephrite.WebAPI.Contracts.RelationSide.Left)"
            },
            "ReturnFunctionLogDetailType": {
                "enum": [
                    "always",
                    "warning",
                    "error",
                    "never"
                ],
                "type": "string",
                "description": "Enumeration of possibilities when detail of a function log should be included in a message."
            },
            "RoomGetResponse": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoomGetResponseElement"
                        },
                        "description": "CZ: Kolekce organizací.",
                        "nullable": true
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "CZ: Celkový počet záznamů.",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "description": "CZ: Počet záznamů.",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "CZ: Počet stránek.",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "CZ: Stránka",
                        "format": "int32"
                    }
                },
                "additionalProperties": false,
                "description": "API GET Customer/Pantheon/Mistnost RESPONSE\r\nAPI GET Customer/Pantheon/Mistnost/{id} RESPONSE"
            },
            "RoomGetResponseElement": {
                "type": "object",
                "properties": {
                    "cislo": {
                        "type": "string",
                        "nullable": true
                    },
                    "mistnostId": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "nazev": {
                        "type": "string",
                        "nullable": true
                    },
                    "stav": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "RoundingDirection": {
                "enum": [
                    "up",
                    "down",
                    "arithmetically"
                ],
                "type": "string",
                "description": "Direction of rounding."
            },
            "RoundingRadix": {
                "enum": [
                    "units",
                    "tenths",
                    "hundredths",
                    "thousandths",
                    "tenThousandths",
                    "hundredThousandths",
                    "millionths"
                ],
                "type": "string",
                "description": "Rounding radix od decimal numbers."
            },
            "StringLengthConflict": {
                "enum": [
                    "dontCheck",
                    "cutFromRight",
                    "error"
                ],
                "type": "string",
                "description": "Way how to solve conflicts in max allowed length of text data."
            },
            "TransactionScope": {
                "enum": [
                    "fileOrDbCommand",
                    "record",
                    "test"
                ],
                "type": "string",
                "description": "Transaction scope, in which the data are imported."
            },
            "UploadFilesCollectionResult{UploadedFileResult}": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UploadedFileResult"
                        },
                        "description": "Uploaded files.",
                        "nullable": true
                    },
                    "count": {
                        "type": "integer",
                        "description": "Count of uploaded files.",
                        "format": "int32",
                        "readOnly": true
                    }
                },
                "additionalProperties": false,
                "description": "Collection of uploaded files."
            },
            "UploadedFileResult": {
                "type": "object",
                "properties": {
                    "contentCrc": {
                        "type": "string",
                        "description": "CRC hash of the file data content.\r\nBe sure you use the same method for calculation of hash on both side of communication - WebAPI - Helios Nephrite application server. \r\nThis is optional property that is calculated on demand. \r\nIf set, the file is uploaded to Helios Nephrite application server, the CRC of uploaded file is checked.\r\nIf differs, an exception is thrown .",
                        "nullable": true
                    },
                    "fileUID": {
                        "type": "string",
                        "description": "Unique file upload identifier.",
                        "nullable": true,
                        "readOnly": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "Gets or sets the raw Content-Type header of the uploaded file.",
                        "nullable": true
                    },
                    "contentDisposition": {
                        "type": "string",
                        "description": "Gets or sets the raw Content-Disposition header of the uploaded file.",
                        "nullable": true
                    },
                    "length": {
                        "type": "integer",
                        "description": "Gets or sets the file length in bytes.",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string",
                        "description": "Gets or sets the form field name from the Content-Disposition header.",
                        "nullable": true
                    },
                    "fileName": {
                        "type": "string",
                        "description": "Gets or sets the file name from the Content-Disposition header.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "description": "Information about uploaded files."
            },
            "User": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Gets or sets the subject identifier.\r\nThe same user can have more ASOL.Nephrite.WebAPI.AuthProvider.Contracts.User.Ids when connects using more languages or db profiles.",
                        "nullable": true,
                        "example": "UserId 22c60fc06eb1bc33fe7210afcc30af1247b4dab5fe719be160627288d0b7f7f1"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "Given name of the user.",
                        "nullable": true,
                        "example": "Firstname"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Family name of the user.",
                        "nullable": true,
                        "example": "Lastname"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Gets or sets the username (login name or login email).",
                        "nullable": true,
                        "example": "domain\firstname.lastname"
                    },
                    "password": {
                        "type": "string",
                        "description": "Gets or sets the password.",
                        "nullable": true
                    },
                    "providerSubjectId": {
                        "type": "string",
                        "description": "Gets or sets the subject identifier from Helios Nephrite.",
                        "nullable": true,
                        "example": "16589745"
                    },
                    "providerName": {
                        "type": "string",
                        "description": "Gets or sets the name of provider which got ASOL.Nephrite.WebAPI.AuthProvider.Contracts.User.ProviderSubjectId.",
                        "nullable": true,
                        "example": "Noris.Clients.ServiceGate.ServiceGateConnector"
                    },
                    "systemRole": {
                        "type": "string",
                        "description": "Gets or sets the system role of the user on a server side (admin/user).",
                        "nullable": true,
                        "example": "user"
                    },
                    "email": {
                        "type": "string",
                        "description": "Gets or sets the email of the user.",
                        "nullable": true,
                        "example": "user"
                    }
                },
                "additionalProperties": false,
                "description": "User entity."
            },
            "ValidationProblemDetails": {
                "type": "object",
                "properties": {
                    "errorNumber": {
                        "type": "integer",
                        "description": "Internal error number. Optional.",
                        "format": "int64",
                        "nullable": true
                    },
                    "errors": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "nullable": true
                    },
                    "type": {
                        "type": "string",
                        "nullable": true
                    },
                    "title": {
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "detail": {
                        "type": "string",
                        "nullable": true
                    },
                    "instance": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "additionalProperties": {},
                "description": "A ProblemDetails for validation errors."
            },
            "VatRateGetResponse": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VatRateGetResponseElement"
                        },
                        "description": "CZ: Kolekce sazeb dph.",
                        "nullable": true
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "CZ: Celkový počet záznamů.",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "description": "CZ: Počet záznamů.",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "CZ: Počet stránek.",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "CZ: Stránka",
                        "format": "int32"
                    }
                },
                "additionalProperties": false,
                "description": "API GET Customer/Pantheon/CiselnikKodDph/{platnostOd} RESPONSE"
            },
            "VatRateGetResponseElement": {
                "type": "object",
                "properties": {
                    "kod": {
                        "type": "string",
                        "nullable": true
                    },
                    "sazba": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "popis": {
                        "type": "string",
                        "nullable": true
                    },
                    "platnostOd": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            }
        },
        "securitySchemes": {
            "basicAuth": {
                "type": "http",
                "description": "Basic Authorization header using the Basic scheme. \r\n\r\n Enter 'UserName' and 'UserId ' values got by api/Connect/LogIn endpoint . \r\n\r\n E.g. UserName = ASOL\\firstname.lastname, Password: 'UserId  ebbea0265....'",
                "scheme": "Basic"
            }
        }
    },
    "tags": [
        {
            "name": "Configuration",
            "description": "Controller to access configuration values from Helios Nephrite."
        },
        {
            "name": "Connect",
            "description": "Controller for actions with users."
        },
        {
            "name": "DataTransfers",
            "description": "Controller to manage data transfers in and out of Helios Nephrite."
        },
        {
            "name": "Documents",
            "description": "Controller to manage data in External documents, Document Managed System documents (DMS) and Managed Documents."
        },
        {
            "name": "Files",
            "description": "Controller to manage data transfers in and out of Helios Nephrite."
        },
        {
            "name": "Generic",
            "description": "Controller contains common actions for entities which can be defined universally."
        },
        {
            "name": "Pantheon",
            "description": "EN: Controller for Pantheon endpoints."
        }
    ],
    "externalDocs": {
        "description": "Integration with Helios Nephrite using web API",
        "url": "https://public.helios.eu/nephrite/doc/cs/index.php?title=Integrace_pomoc%C3%AD_webov%C3%A9ho_API"
    }
}